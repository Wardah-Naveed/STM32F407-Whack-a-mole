
Whack It.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003148  08003148  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003150  08003150  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000090  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000056d3  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001388  00000000  00000000  00025783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000578  00000000  00000000  00026b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004d0  00000000  00000000  00027088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c8b  00000000  00000000  00027558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006586  00000000  00000000  000481e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c82a1  00000000  00000000  0004e769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116a0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001838  00000000  00000000  00116a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003098 	.word	0x08003098

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08003098 	.word	0x08003098

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <DWT_Delay_Init+0x58>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <DWT_Delay_Init+0x58>)
 800058e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000592:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <DWT_Delay_Init+0x58>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	4a10      	ldr	r2, [pc, #64]	; (80005dc <DWT_Delay_Init+0x58>)
 800059a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800059e:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <DWT_Delay_Init+0x5c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <DWT_Delay_Init+0x5c>)
 80005a6:	f023 0301 	bic.w	r3, r3, #1
 80005aa:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <DWT_Delay_Init+0x5c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <DWT_Delay_Init+0x5c>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <DWT_Delay_Init+0x5c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80005be:	bf00      	nop
  __NOP();
 80005c0:	bf00      	nop
  __NOP();
 80005c2:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <DWT_Delay_Init+0x5c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <DWT_Delay_Init+0x4c>
  {
    return 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	e000      	b.n	80005d2 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 80005d0:	2301      	movs	r3, #1
  }
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000edf0 	.word	0xe000edf0
 80005e0:	e0001000 	.word	0xe0001000

080005e4 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <DWT_Delay_us+0x40>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80005f2:	f002 f885 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <DWT_Delay_us+0x44>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	0c9b      	lsrs	r3, r3, #18
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000608:	bf00      	nop
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <DWT_Delay_us+0x40>)
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f8      	bcc.n	800060a <DWT_Delay_us+0x26>
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	e0001000 	.word	0xe0001000
 8000628:	431bde83 	.word	0x431bde83

0800062c <lcd_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd_enablePulse(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <lcd_enablePulse+0x34>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <lcd_enablePulse+0x38>)
 8000636:	8811      	ldrh	r1, [r2, #0]
 8000638:	2201      	movs	r2, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fbfe 	bl	8001e3c <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000640:	2014      	movs	r0, #20
 8000642:	f7ff ffcf 	bl	80005e4 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <lcd_enablePulse+0x34>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <lcd_enablePulse+0x38>)
 800064c:	8811      	ldrh	r1, [r2, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fbf3 	bl	8001e3c <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8000656:	203c      	movs	r0, #60	; 0x3c
 8000658:	f7ff ffc4 	bl	80005e4 <DWT_Delay_us>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000009c 	.word	0x2000009c
 8000664:	200000a2 	.word	0x200000a2

08000668 <lcd_rs>:

/**
 * @brief RS control
 */
static void lcd_rs(bool state)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <lcd_rs+0x24>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a06      	ldr	r2, [pc, #24]	; (8000690 <lcd_rs+0x28>)
 8000678:	8811      	ldrh	r1, [r2, #0]
 800067a:	79fa      	ldrb	r2, [r7, #7]
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fbdd 	bl	8001e3c <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000009c 	.word	0x2000009c
 8000690:	200000a0 	.word	0x200000a0

08000694 <lcd_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd_write(uint8_t wbyte)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	091b      	lsrs	r3, r3, #4
 80006aa:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80006ac:	4b5f      	ldr	r3, [pc, #380]	; (800082c <lcd_write+0x198>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d05a      	beq.n	800076a <lcd_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80006b4:	4b5e      	ldr	r3, [pc, #376]	; (8000830 <lcd_write+0x19c>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	4b5e      	ldr	r3, [pc, #376]	; (8000834 <lcd_write+0x1a0>)
 80006ba:	8819      	ldrh	r1, [r3, #0]
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	f001 fbb9 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80006ca:	4b59      	ldr	r3, [pc, #356]	; (8000830 <lcd_write+0x19c>)
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	4b5a      	ldr	r3, [pc, #360]	; (8000838 <lcd_write+0x1a4>)
 80006d0:	8819      	ldrh	r1, [r3, #0]
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	f003 0302 	and.w	r3, r3, #2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	461a      	mov	r2, r3
 80006dc:	f001 fbae 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80006e0:	4b53      	ldr	r3, [pc, #332]	; (8000830 <lcd_write+0x19c>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <lcd_write+0x1a8>)
 80006e6:	8819      	ldrh	r1, [r3, #0]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	461a      	mov	r2, r3
 80006f2:	f001 fba3 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80006f6:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <lcd_write+0x19c>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	4b51      	ldr	r3, [pc, #324]	; (8000840 <lcd_write+0x1ac>)
 80006fc:	8819      	ldrh	r1, [r3, #0]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	b2db      	uxtb	r3, r3
 8000706:	461a      	mov	r2, r3
 8000708:	f001 fb98 	bl	8001e3c <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800070c:	4b4d      	ldr	r3, [pc, #308]	; (8000844 <lcd_write+0x1b0>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <lcd_write+0x1b4>)
 8000712:	8819      	ldrh	r1, [r3, #0]
 8000714:	7bbb      	ldrb	r3, [r7, #14]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	f001 fb8d 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000722:	4b48      	ldr	r3, [pc, #288]	; (8000844 <lcd_write+0x1b0>)
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	4b49      	ldr	r3, [pc, #292]	; (800084c <lcd_write+0x1b8>)
 8000728:	8819      	ldrh	r1, [r3, #0]
 800072a:	7bbb      	ldrb	r3, [r7, #14]
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	f001 fb82 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000738:	4b42      	ldr	r3, [pc, #264]	; (8000844 <lcd_write+0x1b0>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	4b44      	ldr	r3, [pc, #272]	; (8000850 <lcd_write+0x1bc>)
 800073e:	8819      	ldrh	r1, [r3, #0]
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	f001 fb77 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800074e:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <lcd_write+0x1b0>)
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	4b40      	ldr	r3, [pc, #256]	; (8000854 <lcd_write+0x1c0>)
 8000754:	8819      	ldrh	r1, [r3, #0]
 8000756:	7bbb      	ldrb	r3, [r7, #14]
 8000758:	f003 0308 	and.w	r3, r3, #8
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	f001 fb6c 	bl	8001e3c <HAL_GPIO_WritePin>
    lcd_enablePulse();
 8000764:	f7ff ff62 	bl	800062c <lcd_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd_enablePulse();
  }
}
 8000768:	e05b      	b.n	8000822 <lcd_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800076a:	4b36      	ldr	r3, [pc, #216]	; (8000844 <lcd_write+0x1b0>)
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	4b36      	ldr	r3, [pc, #216]	; (8000848 <lcd_write+0x1b4>)
 8000770:	8819      	ldrh	r1, [r3, #0]
 8000772:	7bbb      	ldrb	r3, [r7, #14]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	f001 fb5e 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000780:	4b30      	ldr	r3, [pc, #192]	; (8000844 <lcd_write+0x1b0>)
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <lcd_write+0x1b8>)
 8000786:	8819      	ldrh	r1, [r3, #0]
 8000788:	7bbb      	ldrb	r3, [r7, #14]
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	f001 fb53 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <lcd_write+0x1b0>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <lcd_write+0x1bc>)
 800079c:	8819      	ldrh	r1, [r3, #0]
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	f001 fb48 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <lcd_write+0x1b0>)
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <lcd_write+0x1c0>)
 80007b2:	8819      	ldrh	r1, [r3, #0]
 80007b4:	7bbb      	ldrb	r3, [r7, #14]
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	f001 fb3d 	bl	8001e3c <HAL_GPIO_WritePin>
    lcd_enablePulse();
 80007c2:	f7ff ff33 	bl	800062c <lcd_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <lcd_write+0x1b0>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <lcd_write+0x1b4>)
 80007cc:	8819      	ldrh	r1, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	f001 fb30 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <lcd_write+0x1b0>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <lcd_write+0x1b8>)
 80007e2:	8819      	ldrh	r1, [r3, #0]
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	f001 fb25 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <lcd_write+0x1b0>)
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <lcd_write+0x1bc>)
 80007f8:	8819      	ldrh	r1, [r3, #0]
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	b2db      	uxtb	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	f001 fb1a 	bl	8001e3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <lcd_write+0x1b0>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <lcd_write+0x1c0>)
 800080e:	8819      	ldrh	r1, [r3, #0]
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	b2db      	uxtb	r3, r3
 8000818:	461a      	mov	r2, r3
 800081a:	f001 fb0f 	bl	8001e3c <HAL_GPIO_WritePin>
    lcd_enablePulse();
 800081e:	f7ff ff05 	bl	800062c <lcd_enablePulse>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000000 	.word	0x20000000
 8000830:	200000a4 	.word	0x200000a4
 8000834:	200000a8 	.word	0x200000a8
 8000838:	200000aa 	.word	0x200000aa
 800083c:	200000ac 	.word	0x200000ac
 8000840:	200000ae 	.word	0x200000ae
 8000844:	200000b0 	.word	0x200000b0
 8000848:	200000b4 	.word	0x200000b4
 800084c:	200000b6 	.word	0x200000b6
 8000850:	200000b8 	.word	0x200000b8
 8000854:	200000ba 	.word	0x200000ba

08000858 <lcd_writeCommand>:

/**
 * @brief Write command
 */
static void lcd_writeCommand(uint8_t cmd)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
  lcd_rs(false);
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ff00 	bl	8000668 <lcd_rs>
  lcd_write(cmd);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff12 	bl	8000694 <lcd_write>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <lcd_writeData>:

/**
 * @brief Write data
 */
static void lcd_writeData(uint8_t data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  lcd_rs(true);
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff fef0 	bl	8000668 <lcd_rs>
  lcd_write(data);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff02 	bl	8000694 <lcd_write>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <lcd_write4>:

/**
 * @brief 4-bits write
 */
static void lcd_write4(uint8_t nib)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 030f 	and.w	r3, r3, #15
 80008a8:	71fb      	strb	r3, [r7, #7]
  lcd_rs(false);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fedc 	bl	8000668 <lcd_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <lcd_write4+0x7c>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <lcd_write4+0x80>)
 80008b6:	8819      	ldrh	r1, [r3, #0]
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	f001 fabb 	bl	8001e3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <lcd_write4+0x7c>)
 80008c8:	6818      	ldr	r0, [r3, #0]
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <lcd_write4+0x84>)
 80008cc:	8819      	ldrh	r1, [r3, #0]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	f001 fab0 	bl	8001e3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <lcd_write4+0x7c>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <lcd_write4+0x88>)
 80008e2:	8819      	ldrh	r1, [r3, #0]
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	461a      	mov	r2, r3
 80008ee:	f001 faa5 	bl	8001e3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <lcd_write4+0x7c>)
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <lcd_write4+0x8c>)
 80008f8:	8819      	ldrh	r1, [r3, #0]
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	f001 fa9a 	bl	8001e3c <HAL_GPIO_WritePin>
  lcd_enablePulse();
 8000908:	f7ff fe90 	bl	800062c <lcd_enablePulse>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000b0 	.word	0x200000b0
 8000918:	200000b4 	.word	0x200000b4
 800091c:	200000b6 	.word	0x200000b6
 8000920:	200000b8 	.word	0x200000b8
 8000924:	200000ba 	.word	0x200000ba

08000928 <lcd_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	460b      	mov	r3, r1
 8000934:	817b      	strh	r3, [r7, #10]
 8000936:	4613      	mov	r3, r2
 8000938:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 800093a:	f7ff fe23 	bl	8000584 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 800093e:	4a24      	ldr	r2, [pc, #144]	; (80009d0 <lcd_init_4bits+0xa8>)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8000944:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <lcd_init_4bits+0xac>)
 8000946:	897b      	ldrh	r3, [r7, #10]
 8000948:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <lcd_init_4bits+0xb0>)
 800094c:	893b      	ldrh	r3, [r7, #8]
 800094e:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8000950:	4a22      	ldr	r2, [pc, #136]	; (80009dc <lcd_init_4bits+0xb4>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8000956:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <lcd_init_4bits+0xb8>)
 8000958:	8b3b      	ldrh	r3, [r7, #24]
 800095a:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 800095c:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <lcd_init_4bits+0xbc>)
 800095e:	8bbb      	ldrh	r3, [r7, #28]
 8000960:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8000962:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <lcd_init_4bits+0xc0>)
 8000964:	8c3b      	ldrh	r3, [r7, #32]
 8000966:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8000968:	4a20      	ldr	r2, [pc, #128]	; (80009ec <lcd_init_4bits+0xc4>)
 800096a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800096c:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <lcd_init_4bits+0xc8>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <lcd_init_4bits+0xcc>)
 8000976:	2228      	movs	r2, #40	; 0x28
 8000978:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 800097a:	2014      	movs	r0, #20
 800097c:	f000 ff74 	bl	8001868 <HAL_Delay>
  //2. Attentions sequence
  lcd_write4(0x3);
 8000980:	2003      	movs	r0, #3
 8000982:	f7ff ff89 	bl	8000898 <lcd_write4>
  LCD_MS_DELAY(5);
 8000986:	2005      	movs	r0, #5
 8000988:	f000 ff6e 	bl	8001868 <HAL_Delay>
  lcd_write4(0x3);
 800098c:	2003      	movs	r0, #3
 800098e:	f7ff ff83 	bl	8000898 <lcd_write4>
  LCD_MS_DELAY(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f000 ff68 	bl	8001868 <HAL_Delay>
  lcd_write4(0x3);
 8000998:	2003      	movs	r0, #3
 800099a:	f7ff ff7d 	bl	8000898 <lcd_write4>
  LCD_MS_DELAY(1);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 ff62 	bl	8001868 <HAL_Delay>
  lcd_write4(0x2);  //4 bit mode
 80009a4:	2002      	movs	r0, #2
 80009a6:	f7ff ff77 	bl	8000898 <lcd_write4>
  LCD_MS_DELAY(1);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f000 ff5c 	bl	8001868 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80009b0:	2028      	movs	r0, #40	; 0x28
 80009b2:	f7ff ff51 	bl	8000858 <lcd_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80009b6:	200f      	movs	r0, #15
 80009b8:	f7ff ff4e 	bl	8000858 <lcd_writeCommand>
  //4. Clear LCD and return home
  lcd_writeCommand(LCD_CLEARDISPLAY);
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff ff4b 	bl	8000858 <lcd_writeCommand>
  LCD_MS_DELAY(3);
 80009c2:	2003      	movs	r0, #3
 80009c4:	f000 ff50 	bl	8001868 <HAL_Delay>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	200000a0 	.word	0x200000a0
 80009d8:	200000a2 	.word	0x200000a2
 80009dc:	200000b0 	.word	0x200000b0
 80009e0:	200000b4 	.word	0x200000b4
 80009e4:	200000b6 	.word	0x200000b6
 80009e8:	200000b8 	.word	0x200000b8
 80009ec:	200000ba 	.word	0x200000ba
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000001 	.word	0x20000001

080009f8 <lcd_clear>:

/**
 * @brief Display clear
 */
void lcd_clear(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  lcd_writeCommand(LCD_CLEARDISPLAY);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff ff2b 	bl	8000858 <lcd_writeCommand>
  LCD_MS_DELAY(3);
 8000a02:	2003      	movs	r0, #3
 8000a04:	f000 ff30 	bl	8001868 <HAL_Delay>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <lcd_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd_printf("Value1 = %.1f", 123.45))
 */
void lcd_printf(const char* str, ...)
{
 8000a0c:	b40f      	push	{r0, r1, r2, r3}
 8000a0e:	b590      	push	{r4, r7, lr}
 8000a10:	b089      	sub	sp, #36	; 0x24
 8000a12:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000a14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a18:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fee0 	bl	80027e8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	77fb      	strb	r3, [r7, #31]
 8000a2c:	e00a      	b.n	8000a44 <lcd_printf+0x38>
  {
    lcd_writeData((uint8_t)stringArray[i]);
 8000a2e:	7ffb      	ldrb	r3, [r7, #31]
 8000a30:	3320      	adds	r3, #32
 8000a32:	443b      	add	r3, r7
 8000a34:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff1d 	bl	8000878 <lcd_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000a3e:	7ffb      	ldrb	r3, [r7, #31]
 8000a40:	3301      	adds	r3, #1
 8000a42:	77fb      	strb	r3, [r7, #31]
 8000a44:	7ffc      	ldrb	r4, [r7, #31]
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fbc0 	bl	80001d0 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	429c      	cmp	r4, r3
 8000a54:	d202      	bcs.n	8000a5c <lcd_printf+0x50>
 8000a56:	7ffb      	ldrb	r3, [r7, #31]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d9e8      	bls.n	8000a2e <lcd_printf+0x22>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3724      	adds	r7, #36	; 0x24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a66:	b004      	add	sp, #16
 8000a68:	4770      	bx	lr
	...

08000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db0b      	blt.n	8000a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 021f 	and.w	r2, r3, #31
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <__NVIC_EnableIRQ+0x38>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <delay1sec>:
uint32_t TRNG_GetRandomNumber(uint32_t min, uint32_t max);
void updateScore(void);
void startGame(void);

void delay1sec(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8000aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
    uint32_t start = TIM2->CNT;
 8000ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abc:	607b      	str	r3, [r7, #4]
    random_LED = TRNG_GetRandomNumber(0, 5);
 8000abe:	2105      	movs	r1, #5
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f9c9 	bl	8000e58 <TRNG_GetRandomNumber>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <delay1sec+0x60>)
 8000aca:	6013      	str	r3, [r2, #0]
    GPIOC->ODR = 0;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <delay1sec+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
    GPIOC->ODR |= (uint32_t)(1<<random_LED);
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <delay1sec+0x64>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <delay1sec+0x60>)
 8000ad8:	6812      	ldr	r2, [r2, #0]
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <delay1sec+0x64>)
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6153      	str	r3, [r2, #20]
    while ((TIM2->CNT - start) < TIM2->ARR);
 8000ae8:	bf00      	nop
 8000aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d3f5      	bcc.n	8000aea <delay1sec+0x42>
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000004 	.word	0x20000004
 8000b0c:	40020800 	.word	0x40020800

08000b10 <delay3sec>:

void delay3sec(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
	TIM5->CNT = 0;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <delay3sec+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t start = TIM5->CNT;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <delay3sec+0x50>)
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b20:	607b      	str	r3, [r7, #4]
	GPIOD->ODR ^= (1<<12);
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <delay3sec+0x54>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <delay3sec+0x54>)
 8000b28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000b2c:	6153      	str	r3, [r2, #20]
	gameStart = 1;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <delay3sec+0x58>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
	while ((TIM5->CNT - start) < TIM5->ARR) {}
 8000b34:	bf00      	nop
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <delay3sec+0x50>)
 8000b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	1ad2      	subs	r2, r2, r3
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <delay3sec+0x50>)
 8000b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3f7      	bcc.n	8000b36 <delay3sec+0x26>
	TIM5->SR &= ~TIM_SR_UIF;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <delay3sec+0x50>)
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <delay3sec+0x50>)
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	6113      	str	r3, [r2, #16]
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40000c00 	.word	0x40000c00
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	200000bc 	.word	0x200000bc

08000b6c <updateScore>:

void updateScore(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

	sprintf(a,"%d",score);
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <updateScore+0x64>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4916      	ldr	r1, [pc, #88]	; (8000bd4 <updateScore+0x68>)
 8000b7a:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <updateScore+0x6c>)
 8000b7c:	f001 fdfe 	bl	800277c <siprintf>
	for (int i = 0; i < 27; i++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	e018      	b.n	8000bb8 <updateScore+0x4c>
	{
		if (i<7)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b06      	cmp	r3, #6
 8000b8a:	dc09      	bgt.n	8000ba0 <updateScore+0x34>
			displayScore[i] = display[i];
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <updateScore+0x70>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	7819      	ldrb	r1, [r3, #0]
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <updateScore+0x74>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	460a      	mov	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e008      	b.n	8000bb2 <updateScore+0x46>
		else
			displayScore[i] = a[i-7];
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b07      	subs	r3, #7
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <updateScore+0x6c>)
 8000ba6:	5cd1      	ldrb	r1, [r2, r3]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <updateScore+0x74>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	460a      	mov	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 27; i++)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b1a      	cmp	r3, #26
 8000bbc:	dde3      	ble.n	8000b86 <updateScore+0x1a>
	}
	lcd_clear();
 8000bbe:	f7ff ff1b 	bl	80009f8 <lcd_clear>
	lcd_printf(displayScore);
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <updateScore+0x74>)
 8000bc4:	f7ff ff22 	bl	8000a0c <lcd_printf>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000c0 	.word	0x200000c0
 8000bd4:	080030b0 	.word	0x080030b0
 8000bd8:	200000c8 	.word	0x200000c8
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	200000dc 	.word	0x200000dc

08000be4 <startGame>:

void startGame(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	GPIOC->ODR = 0;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <startGame+0x48>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
	lcd_clear();
 8000bee:	f7ff ff03 	bl	80009f8 <lcd_clear>
	lcd_printf("  STARTING IN");
 8000bf2:	480f      	ldr	r0, [pc, #60]	; (8000c30 <startGame+0x4c>)
 8000bf4:	f7ff ff0a 	bl	8000a0c <lcd_printf>
	delay3sec();
 8000bf8:	f7ff ff8a 	bl	8000b10 <delay3sec>
	lcd_clear();
 8000bfc:	f7ff fefc 	bl	80009f8 <lcd_clear>
	lcd_printf("       3!");
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <startGame+0x50>)
 8000c02:	f7ff ff03 	bl	8000a0c <lcd_printf>
	delay3sec();
 8000c06:	f7ff ff83 	bl	8000b10 <delay3sec>
	lcd_clear();
 8000c0a:	f7ff fef5 	bl	80009f8 <lcd_clear>
	lcd_printf("       2!");
 8000c0e:	480a      	ldr	r0, [pc, #40]	; (8000c38 <startGame+0x54>)
 8000c10:	f7ff fefc 	bl	8000a0c <lcd_printf>
	delay3sec();
 8000c14:	f7ff ff7c 	bl	8000b10 <delay3sec>
	lcd_clear();
 8000c18:	f7ff feee 	bl	80009f8 <lcd_clear>
	lcd_printf("       1!");
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <startGame+0x58>)
 8000c1e:	f7ff fef5 	bl	8000a0c <lcd_printf>
	delay3sec();
 8000c22:	f7ff ff75 	bl	8000b10 <delay3sec>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	080030b4 	.word	0x080030b4
 8000c34:	080030c4 	.word	0x080030c4
 8000c38:	080030d0 	.word	0x080030d0
 8000c3c:	080030dc 	.word	0x080030dc

08000c40 <main>:

int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af04      	add	r7, sp, #16
  HAL_Init();
 8000c46:	f000 fd9d 	bl	8001784 <HAL_Init>

  SystemClock_Config();
 8000c4a:	f000 f883 	bl	8000d54 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4e:	f000 fbc5 	bl	80013dc <MX_GPIO_Init>
  MX_TIM5_Init();
 8000c52:	f000 f961 	bl	8000f18 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000c56:	f000 f925 	bl	8000ea4 <MX_TIM2_Init>
  TRNG_Init();
 8000c5a:	f000 f8e5 	bl	8000e28 <TRNG_Init>
  lcd_init_4bits(RS_GPIO_Port,RS_Pin,enable_Pin, d4_GPIO_Port,d4_Pin,d5_Pin, d6_Pin,d7_Pin);
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	9303      	str	r3, [sp, #12]
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2320      	movs	r3, #32
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <main+0xf4>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	2101      	movs	r1, #1
 8000c74:	482f      	ldr	r0, [pc, #188]	; (8000d34 <main+0xf4>)
 8000c76:	f7ff fe57 	bl	8000928 <lcd_init_4bits>
  HAL_Delay (100);
 8000c7a:	2064      	movs	r0, #100	; 0x64
 8000c7c:	f000 fdf4 	bl	8001868 <HAL_Delay>
  lcd_printf("    Welcome");
 8000c80:	482d      	ldr	r0, [pc, #180]	; (8000d38 <main+0xf8>)
 8000c82:	f7ff fec3 	bl	8000a0c <lcd_printf>
  HAL_Delay (100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f000 fdee 	bl	8001868 <HAL_Delay>
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	482b      	ldr	r0, [pc, #172]	; (8000d3c <main+0xfc>)
 8000c90:	f001 f8bc 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d122      	bne.n	8000ce0 <main+0xa0>
	  {
		  gameOver = 0;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <main+0x100>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
		  startGame();
 8000ca0:	f7ff ffa0 	bl	8000be4 <startGame>
		  while (gameStart)
 8000ca4:	e018      	b.n	8000cd8 <main+0x98>
		  {
			  updateScore();
 8000ca6:	f7ff ff61 	bl	8000b6c <updateScore>
			  gameOver = 1;
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <main+0x100>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
		  	  delay1sec();
 8000cb0:	f7ff fefa 	bl	8000aa8 <delay1sec>
		  	  GPIOD->ODR ^= (1<<12);
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <main+0xf4>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <main+0xf4>)
 8000cba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000cbe:	6153      	str	r3, [r2, #20]
			  if(gameOver)
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <main+0x100>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <main+0x8e>
			  {
				  lcd_clear();
 8000cc8:	f7ff fe96 	bl	80009f8 <lcd_clear>
				  break;
 8000ccc:	e008      	b.n	8000ce0 <main+0xa0>
			  }
			  score++;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <main+0x104>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <main+0x104>)
 8000cd6:	6013      	str	r3, [r2, #0]
		  while (gameStart)
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <main+0x108>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1e2      	bne.n	8000ca6 <main+0x66>
		  }
	  }

	  if(gameOver)
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <main+0x100>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0d1      	beq.n	8000c8c <main+0x4c>
	  {
		  GPIOC->ODR = 65535;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <main+0x10c>)
 8000cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cee:	615a      	str	r2, [r3, #20]
		  GPIOD->ODR |= (1<<3);
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <main+0xf4>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <main+0xf4>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	6153      	str	r3, [r2, #20]

		  lcd_printf("   GAME OVER!");
 8000cfc:	4814      	ldr	r0, [pc, #80]	; (8000d50 <main+0x110>)
 8000cfe:	f7ff fe85 	bl	8000a0c <lcd_printf>
		  delay3sec();
 8000d02:	f7ff ff05 	bl	8000b10 <delay3sec>
		  GPIOD->ODR &= ~(1<<3);
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <main+0xf4>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <main+0xf4>)
 8000d0c:	f023 0308 	bic.w	r3, r3, #8
 8000d10:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR ^= (1<<12);
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <main+0xf4>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <main+0xf4>)
 8000d18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000d1c:	6153      	str	r3, [r2, #20]
		  gameStart = 0;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <main+0x108>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
		  gameOver = 0;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <main+0x100>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
		  score = 0;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <main+0x104>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000d30:	e7ac      	b.n	8000c8c <main+0x4c>
 8000d32:	bf00      	nop
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	080030e8 	.word	0x080030e8
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	200000c4 	.word	0x200000c4
 8000d44:	200000c0 	.word	0x200000c0
 8000d48:	200000bc 	.word	0x200000bc
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	080030f4 	.word	0x080030f4

08000d54 <SystemClock_Config>:
	  }
  }
}

void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b094      	sub	sp, #80	; 0x50
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 0320 	add.w	r3, r7, #32
 8000d5e:	2230      	movs	r2, #48	; 0x30
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 fd02 	bl	800276c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <SystemClock_Config+0xcc>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <SystemClock_Config+0xcc>)
 8000d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <SystemClock_Config+0xd0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <SystemClock_Config+0xd0>)
 8000d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db0:	2302      	movs	r3, #2
 8000db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db8:	2310      	movs	r3, #16
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dc8:	23a8      	movs	r3, #168	; 0xa8
 8000dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 f86d 	bl	8001eb8 <HAL_RCC_OscConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000de4:	f000 fc04 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de8:	230f      	movs	r3, #15
 8000dea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dec:	2302      	movs	r3, #2
 8000dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000df4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2105      	movs	r1, #5
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 face 	bl	80023a8 <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e12:	f000 fbed 	bl	80015f0 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3750      	adds	r7, #80	; 0x50
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <TRNG_Init>:

void TRNG_Init(void) {
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
    // Enable RNG clock
    RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <TRNG_Init+0x28>)
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <TRNG_Init+0x28>)
 8000e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e36:	6353      	str	r3, [r2, #52]	; 0x34

    // Enable the TRNG
    RNG->CR |= RNG_CR_RNGEN;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <TRNG_Init+0x2c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <TRNG_Init+0x2c>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	50060800 	.word	0x50060800

08000e58 <TRNG_GetRandomNumber>:

uint32_t TRNG_GetRandomNumber(uint32_t min, uint32_t max) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
    // Wait for RNG to become ready
    while (!(RNG->SR & RNG_SR_DRDY));
 8000e62:	bf00      	nop
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <TRNG_GetRandomNumber+0x48>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f9      	beq.n	8000e64 <TRNG_GetRandomNumber+0xc>

    // Obtain a random number
    uint32_t random_number = RNG->DR;
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <TRNG_GetRandomNumber+0x48>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	60fb      	str	r3, [r7, #12]

    // Adjust the range of the random number
    random_number = random_number % (max - min + 1) + min;
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e84:	fb01 f202 	mul.w	r2, r1, r2
 8000e88:	1a9b      	subs	r3, r3, r2
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]

    return random_number;
 8000e90:	68fb      	ldr	r3, [r7, #12]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	50060800 	.word	0x50060800

08000ea4 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<0);
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_TIM2_Init+0x50>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <MX_TIM2_Init+0x50>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 16799;
 8000eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb8:	f244 129f 	movw	r2, #16799	; 0x419f
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 4999;
 8000ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec2:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= (1<<0);
 8000ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]
	TIM2->DIER |= TIM_DIER_UIE;
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 8000ee8:	201c      	movs	r0, #28
 8000eea:	f7ff fdbf 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;  // Clear the update interrupt flag
 8000efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	6113      	str	r3, [r2, #16]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<3);
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_TIM5_Init+0x38>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <MX_TIM5_Init+0x38>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	6413      	str	r3, [r2, #64]	; 0x40
	TIM5->PSC = 16799;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <MX_TIM5_Init+0x3c>)
 8000f2a:	f244 129f 	movw	r2, #16799	; 0x419f
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 4999;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_TIM5_Init+0x3c>)
 8000f32:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM5->CR1 |= (1<<0);
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_TIM5_Init+0x3c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <MX_TIM5_Init+0x3c>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40000c00 	.word	0x40000c00

08000f58 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	if (random_LED == 0)
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <EXTI0_IRQHandler+0x3c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d106      	bne.n	8000f72 <EXTI0_IRQHandler+0x1a>
	{
		gameOver = 0;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <EXTI0_IRQHandler+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <EXTI0_IRQHandler+0x44>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	e005      	b.n	8000f7e <EXTI0_IRQHandler+0x26>
	}
	else
	{
		gameOver = 1;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <EXTI0_IRQHandler+0x40>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <EXTI0_IRQHandler+0x44>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
	}
	GPIOD->ODR ^= (1<<13);
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <EXTI0_IRQHandler+0x48>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <EXTI0_IRQHandler+0x48>)
 8000f84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000f88:	6153      	str	r3, [r2, #20]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 ff70 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000004 	.word	0x20000004
 8000f98:	200000c4 	.word	0x200000c4
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020c00 	.word	0x40020c00

08000fa4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	if (random_LED == 1)
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <EXTI1_IRQHandler+0x3c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <EXTI1_IRQHandler+0x1a>
	{
		gameOver = 0;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <EXTI1_IRQHandler+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <EXTI1_IRQHandler+0x44>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
 8000fbc:	e005      	b.n	8000fca <EXTI1_IRQHandler+0x26>

	}
	else
	{
		gameOver = 1;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <EXTI1_IRQHandler+0x40>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <EXTI1_IRQHandler+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
	}
	GPIOD->ODR ^= (1<<13);
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <EXTI1_IRQHandler+0x48>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <EXTI1_IRQHandler+0x48>)
 8000fd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000fd4:	6153      	str	r3, [r2, #20]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f000 ff4a 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000004 	.word	0x20000004
 8000fe4:	200000c4 	.word	0x200000c4
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	if (random_LED == 2)
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <EXTI2_IRQHandler+0x3c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d106      	bne.n	800100a <EXTI2_IRQHandler+0x1a>
	{
		gameOver = 0;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <EXTI2_IRQHandler+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <EXTI2_IRQHandler+0x44>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	e005      	b.n	8001016 <EXTI2_IRQHandler+0x26>
	}
	else
	{
		gameOver = 1;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <EXTI2_IRQHandler+0x40>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <EXTI2_IRQHandler+0x44>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
	}
	GPIOD->ODR ^= (1<<13);
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <EXTI2_IRQHandler+0x48>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a07      	ldr	r2, [pc, #28]	; (8001038 <EXTI2_IRQHandler+0x48>)
 800101c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001020:	6153      	str	r3, [r2, #20]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001022:	2004      	movs	r0, #4
 8001024:	f000 ff24 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000004 	.word	0x20000004
 8001030:	200000c4 	.word	0x200000c4
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00

0800103c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	if (random_LED == 3)
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <EXTI3_IRQHandler+0x3c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d106      	bne.n	8001056 <EXTI3_IRQHandler+0x1a>
	{
		gameOver = 0;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <EXTI3_IRQHandler+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <EXTI3_IRQHandler+0x44>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	e005      	b.n	8001062 <EXTI3_IRQHandler+0x26>
	}
	else
	{
		gameOver = 1;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <EXTI3_IRQHandler+0x40>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <EXTI3_IRQHandler+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
	}
	GPIOD->ODR ^= (1<<13);
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <EXTI3_IRQHandler+0x48>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a07      	ldr	r2, [pc, #28]	; (8001084 <EXTI3_IRQHandler+0x48>)
 8001068:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800106c:	6153      	str	r3, [r2, #20]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800106e:	2008      	movs	r0, #8
 8001070:	f000 fefe 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000004 	.word	0x20000004
 800107c:	200000c4 	.word	0x200000c4
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00

08001088 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	if (random_LED == 4)
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <EXTI4_IRQHandler+0x3c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d106      	bne.n	80010a2 <EXTI4_IRQHandler+0x1a>
	{
		gameOver = 0;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <EXTI4_IRQHandler+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <EXTI4_IRQHandler+0x44>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	e005      	b.n	80010ae <EXTI4_IRQHandler+0x26>
	}
	else
	{
		gameOver = 1;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <EXTI4_IRQHandler+0x40>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
		GPIOC->ODR = 0;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <EXTI4_IRQHandler+0x44>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
	}
	GPIOD->ODR ^= (1<<13);
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <EXTI4_IRQHandler+0x48>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <EXTI4_IRQHandler+0x48>)
 80010b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80010b8:	6153      	str	r3, [r2, #20]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80010ba:	2010      	movs	r0, #16
 80010bc:	f000 fed8 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000004 	.word	0x20000004
 80010c8:	200000c4 	.word	0x200000c4
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<5))
 80010d8:	4b51      	ldr	r3, [pc, #324]	; (8001220 <EXTI9_5_IRQHandler+0x14c>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d019      	beq.n	8001118 <EXTI9_5_IRQHandler+0x44>
	{
		if (random_LED == 5)
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <EXTI9_5_IRQHandler+0x150>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d106      	bne.n	80010fa <EXTI9_5_IRQHandler+0x26>
		{
			gameOver = 0;
 80010ec:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 80010f2:	4b4e      	ldr	r3, [pc, #312]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
 80010f8:	e005      	b.n	8001106 <EXTI9_5_IRQHandler+0x32>
		}
		else
		{
			gameOver = 1;
 80010fa:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001100:	4b4a      	ldr	r3, [pc, #296]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 8001106:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a49      	ldr	r2, [pc, #292]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 800110c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001110:	6153      	str	r3, [r2, #20]

		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001112:	2020      	movs	r0, #32
 8001114:	f000 feac 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}

	if (EXTI->PR & (1<<6))
 8001118:	4b41      	ldr	r3, [pc, #260]	; (8001220 <EXTI9_5_IRQHandler+0x14c>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001120:	2b00      	cmp	r3, #0
 8001122:	d019      	beq.n	8001158 <EXTI9_5_IRQHandler+0x84>
	{
		if (random_LED == 6)
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <EXTI9_5_IRQHandler+0x150>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b06      	cmp	r3, #6
 800112a:	d106      	bne.n	800113a <EXTI9_5_IRQHandler+0x66>
		{
			gameOver = 0;
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	e005      	b.n	8001146 <EXTI9_5_IRQHandler+0x72>
		}
		else
		{
			gameOver = 1;
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001140:	4b3a      	ldr	r3, [pc, #232]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a39      	ldr	r2, [pc, #228]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 800114c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001150:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001152:	2040      	movs	r0, #64	; 0x40
 8001154:	f000 fe8c 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}
	if (EXTI->PR & (1<<7))
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <EXTI9_5_IRQHandler+0x14c>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001160:	2b00      	cmp	r3, #0
 8001162:	d019      	beq.n	8001198 <EXTI9_5_IRQHandler+0xc4>
	{
		if (random_LED == 7)
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <EXTI9_5_IRQHandler+0x150>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b07      	cmp	r3, #7
 800116a:	d106      	bne.n	800117a <EXTI9_5_IRQHandler+0xa6>
		{
			gameOver = 0;
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	e005      	b.n	8001186 <EXTI9_5_IRQHandler+0xb2>
		}
		else
		{
			gameOver = 1;
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a29      	ldr	r2, [pc, #164]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 800118c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001190:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001192:	2080      	movs	r0, #128	; 0x80
 8001194:	f000 fe6c 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}
	if (EXTI->PR & (1<<8))
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <EXTI9_5_IRQHandler+0x14c>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01a      	beq.n	80011da <EXTI9_5_IRQHandler+0x106>
	{
		if (random_LED == 8)
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <EXTI9_5_IRQHandler+0x150>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d106      	bne.n	80011ba <EXTI9_5_IRQHandler+0xe6>
		{
			gameOver = 0;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	e005      	b.n	80011c6 <EXTI9_5_IRQHandler+0xf2>
		}
		else
		{
			gameOver = 1;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a19      	ldr	r2, [pc, #100]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 80011cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80011d0:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80011d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011d6:	f000 fe4b 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}
	if (EXTI->PR & (1<<9))
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <EXTI9_5_IRQHandler+0x14c>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d01a      	beq.n	800121c <EXTI9_5_IRQHandler+0x148>
	{
		if (random_LED == 9)
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <EXTI9_5_IRQHandler+0x150>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b09      	cmp	r3, #9
 80011ec:	d106      	bne.n	80011fc <EXTI9_5_IRQHandler+0x128>
		{
			gameOver = 0;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	e005      	b.n	8001208 <EXTI9_5_IRQHandler+0x134>
		}
		else
		{
			gameOver = 1;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <EXTI9_5_IRQHandler+0x154>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <EXTI9_5_IRQHandler+0x158>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	4a08      	ldr	r2, [pc, #32]	; (8001230 <EXTI9_5_IRQHandler+0x15c>)
 800120e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001212:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001214:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001218:	f000 fe2a 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40013c00 	.word	0x40013c00
 8001224:	20000004 	.word	0x20000004
 8001228:	200000c4 	.word	0x200000c4
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00

08001234 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<10))
 8001238:	4b63      	ldr	r3, [pc, #396]	; (80013c8 <EXTI15_10_IRQHandler+0x194>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01a      	beq.n	800127a <EXTI15_10_IRQHandler+0x46>
	{
		if (random_LED == 10)
 8001244:	4b61      	ldr	r3, [pc, #388]	; (80013cc <EXTI15_10_IRQHandler+0x198>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b0a      	cmp	r3, #10
 800124a:	d106      	bne.n	800125a <EXTI15_10_IRQHandler+0x26>
		{
			gameOver = 0;
 800124c:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001252:	4b60      	ldr	r3, [pc, #384]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	e005      	b.n	8001266 <EXTI15_10_IRQHandler+0x32>
		}
		else
		{
			gameOver = 1;
 800125a:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001260:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 800126c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001270:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001272:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001276:	f000 fdfb 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}

	if (EXTI->PR & (1<<11))
 800127a:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <EXTI15_10_IRQHandler+0x194>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01a      	beq.n	80012bc <EXTI15_10_IRQHandler+0x88>
	{
		if (random_LED == 11)
 8001286:	4b51      	ldr	r3, [pc, #324]	; (80013cc <EXTI15_10_IRQHandler+0x198>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b0b      	cmp	r3, #11
 800128c:	d106      	bne.n	800129c <EXTI15_10_IRQHandler+0x68>
		{
			gameOver = 0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001294:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
 800129a:	e005      	b.n	80012a8 <EXTI15_10_IRQHandler+0x74>
		}
		else
		{
			gameOver = 1;
 800129c:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 80012a2:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 80012a8:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	4a4a      	ldr	r2, [pc, #296]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 80012ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80012b2:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80012b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012b8:	f000 fdda 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}
	if (EXTI->PR & (1<<12))
 80012bc:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <EXTI15_10_IRQHandler+0x194>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d01a      	beq.n	80012fe <EXTI15_10_IRQHandler+0xca>
	{
		if (random_LED == 12)
 80012c8:	4b40      	ldr	r3, [pc, #256]	; (80013cc <EXTI15_10_IRQHandler+0x198>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d106      	bne.n	80012de <EXTI15_10_IRQHandler+0xaa>
		{
			gameOver = 0;
 80012d0:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	e005      	b.n	80012ea <EXTI15_10_IRQHandler+0xb6>
		}
		else
		{
			gameOver = 1;
 80012de:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 80012e4:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a3a      	ldr	r2, [pc, #232]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 80012f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80012f4:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80012f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012fa:	f000 fdb9 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}
	if (EXTI->PR & (1<<13))
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <EXTI15_10_IRQHandler+0x194>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01a      	beq.n	8001340 <EXTI15_10_IRQHandler+0x10c>
	{
		if (random_LED == 13)
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <EXTI15_10_IRQHandler+0x198>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b0d      	cmp	r3, #13
 8001310:	d106      	bne.n	8001320 <EXTI15_10_IRQHandler+0xec>
		{
			gameOver = 0;
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	e005      	b.n	800132c <EXTI15_10_IRQHandler+0xf8>
		}
		else
		{
			gameOver = 1;
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 8001332:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001336:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001338:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800133c:	f000 fd98 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}
	if (EXTI->PR & (1<<14))
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <EXTI15_10_IRQHandler+0x194>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01a      	beq.n	8001382 <EXTI15_10_IRQHandler+0x14e>
	{
		if (random_LED == 14)
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <EXTI15_10_IRQHandler+0x198>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b0e      	cmp	r3, #14
 8001352:	d106      	bne.n	8001362 <EXTI15_10_IRQHandler+0x12e>
		{
			gameOver = 0;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	e005      	b.n	800136e <EXTI15_10_IRQHandler+0x13a>
		}
		else
		{
			gameOver = 1;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 8001374:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001378:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800137a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800137e:	f000 fd77 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}
	if (EXTI->PR & (1<<15))
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <EXTI15_10_IRQHandler+0x194>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d01a      	beq.n	80013c4 <EXTI15_10_IRQHandler+0x190>
	{
		if (random_LED == 15)
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <EXTI15_10_IRQHandler+0x198>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b0f      	cmp	r3, #15
 8001394:	d106      	bne.n	80013a4 <EXTI15_10_IRQHandler+0x170>
		{
			gameOver = 0;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	e005      	b.n	80013b0 <EXTI15_10_IRQHandler+0x17c>
		}
		else
		{
			gameOver = 1;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <EXTI15_10_IRQHandler+0x19c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
			GPIOC->ODR = 0;
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <EXTI15_10_IRQHandler+0x1a0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
		}
		GPIOD->ODR ^= (1<<13);
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <EXTI15_10_IRQHandler+0x1a4>)
 80013b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80013ba:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80013bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013c0:	f000 fd56 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
	}
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013c00 	.word	0x40013c00
 80013cc:	20000004 	.word	0x20000004
 80013d0:	200000c4 	.word	0x200000c4
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00

080013dc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b79      	ldr	r3, [pc, #484]	; (80015dc <MX_GPIO_Init+0x200>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a78      	ldr	r2, [pc, #480]	; (80015dc <MX_GPIO_Init+0x200>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <MX_GPIO_Init+0x200>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <MX_GPIO_Init+0x200>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a71      	ldr	r2, [pc, #452]	; (80015dc <MX_GPIO_Init+0x200>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b6f      	ldr	r3, [pc, #444]	; (80015dc <MX_GPIO_Init+0x200>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <MX_GPIO_Init+0x200>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a6a      	ldr	r2, [pc, #424]	; (80015dc <MX_GPIO_Init+0x200>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b68      	ldr	r3, [pc, #416]	; (80015dc <MX_GPIO_Init+0x200>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b64      	ldr	r3, [pc, #400]	; (80015dc <MX_GPIO_Init+0x200>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a63      	ldr	r2, [pc, #396]	; (80015dc <MX_GPIO_Init+0x200>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b61      	ldr	r3, [pc, #388]	; (80015dc <MX_GPIO_Init+0x200>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <MX_GPIO_Init+0x200>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a5c      	ldr	r2, [pc, #368]	; (80015dc <MX_GPIO_Init+0x200>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <MX_GPIO_Init+0x200>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800147e:	2200      	movs	r2, #0
 8001480:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001484:	4856      	ldr	r0, [pc, #344]	; (80015e0 <MX_GPIO_Init+0x204>)
 8001486:	f000 fcd9 	bl	8001e3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001490:	4854      	ldr	r0, [pc, #336]	; (80015e4 <MX_GPIO_Init+0x208>)
 8001492:	f000 fcd3 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	484c      	ldr	r0, [pc, #304]	; (80015e0 <MX_GPIO_Init+0x204>)
 80014b0:	f000 fb10 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b4:	2301      	movs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4848      	ldr	r0, [pc, #288]	; (80015e8 <MX_GPIO_Init+0x20c>)
 80014c8:	f000 fb04 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, RS_Pin|enable_Pin|d4_Pin|d5_Pin
 80014cc:	2200      	movs	r2, #0
 80014ce:	21f3      	movs	r1, #243	; 0xf3
 80014d0:	4844      	ldr	r0, [pc, #272]	; (80015e4 <MX_GPIO_Init+0x208>)
 80014d2:	f000 fcb3 	bl	8001e3c <HAL_GPIO_WritePin>
                            |d6_Pin|d7_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pins : RS_Pin enable_Pin d4_Pin d5_Pin
                             d6_Pin d7_Pin */
    GPIO_InitStruct.Pin = RS_Pin|enable_Pin|d4_Pin|d5_Pin
 80014d6:	23f3      	movs	r3, #243	; 0xf3
 80014d8:	617b      	str	r3, [r7, #20]
                            |d6_Pin|d7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	483d      	ldr	r0, [pc, #244]	; (80015e4 <MX_GPIO_Init+0x208>)
 80014ee:	f000 faf1 	bl	8001ad4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PD2 */
  	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f2:	2304      	movs	r3, #4
 80014f4:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014fa:	61bb      	str	r3, [r7, #24]
  	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4837      	ldr	r0, [pc, #220]	; (80015e4 <MX_GPIO_Init+0x208>)
 8001508:	f000 fae4 	bl	8001ad4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PD3 */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800150c:	2308      	movs	r3, #8
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4830      	ldr	r0, [pc, #192]	; (80015e4 <MX_GPIO_Init+0x208>)
 8001524:	f000 fad6 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10
 8001528:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800152c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	2301      	movs	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	482b      	ldr	r0, [pc, #172]	; (80015ec <MX_GPIO_Init+0x210>)
 8001540:	f000 fac8 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001544:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4821      	ldr	r0, [pc, #132]	; (80015e4 <MX_GPIO_Init+0x208>)
 800155e:	f000 fab9 	bl	8001ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2006      	movs	r0, #6
 8001568:	f000 fa7d 	bl	8001a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800156c:	2006      	movs	r0, #6
 800156e:	f000 fa96 	bl	8001a9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2007      	movs	r0, #7
 8001578:	f000 fa75 	bl	8001a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800157c:	2007      	movs	r0, #7
 800157e:	f000 fa8e 	bl	8001a9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2008      	movs	r0, #8
 8001588:	f000 fa6d 	bl	8001a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800158c:	2008      	movs	r0, #8
 800158e:	f000 fa86 	bl	8001a9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2009      	movs	r0, #9
 8001598:	f000 fa65 	bl	8001a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800159c:	2009      	movs	r0, #9
 800159e:	f000 fa7e 	bl	8001a9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	200a      	movs	r0, #10
 80015a8:	f000 fa5d 	bl	8001a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015ac:	200a      	movs	r0, #10
 80015ae:	f000 fa76 	bl	8001a9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2017      	movs	r0, #23
 80015b8:	f000 fa55 	bl	8001a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015bc:	2017      	movs	r0, #23
 80015be:	f000 fa6e 	bl	8001a9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2028      	movs	r0, #40	; 0x28
 80015c8:	f000 fa4d 	bl	8001a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015cc:	2028      	movs	r0, #40	; 0x28
 80015ce:	f000 fa66 	bl	8001a9e <HAL_NVIC_EnableIRQ>

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400

080015f0 <Error_Handler>:

void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  __disable_irq();
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <Error_Handler+0x8>
	...

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_MspInit+0x4c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_MspInit+0x4c>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 f8c6 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <_sbrk+0x5c>)
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <_sbrk+0x60>)
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <_sbrk+0x64>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <_sbrk+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d207      	bcs.n	80016e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d0:	f001 f822 	bl	8002718 <__errno>
 80016d4:	4603      	mov	r3, r0
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	e009      	b.n	80016f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <_sbrk+0x64>)
 80016f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20020000 	.word	0x20020000
 8001700:	00000400 	.word	0x00000400
 8001704:	200000f8 	.word	0x200000f8
 8001708:	20000110 	.word	0x20000110

0800170c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <SystemInit+0x20>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <SystemInit+0x20>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001736:	490e      	ldr	r1, [pc, #56]	; (8001770 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800174c:	4c0b      	ldr	r4, [pc, #44]	; (800177c <LoopFillZerobss+0x26>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800175a:	f7ff ffd7 	bl	800170c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175e:	f000 ffe1 	bl	8002724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001762:	f7ff fa6d 	bl	8000c40 <main>
  bx  lr    
 8001766:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001774:	08003158 	.word	0x08003158
  ldr r2, =_sbss
 8001778:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800177c:	20000110 	.word	0x20000110

08001780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <HAL_Init+0x40>)
 800178e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_Init+0x40>)
 800179a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_Init+0x40>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f94f 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff ff20 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023c00 	.word	0x40023c00

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f967 	bl	8001aba <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f92f 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000010 	.word	0x20000010
 8001820:	20000018 	.word	0x20000018
 8001824:	20000014 	.word	0x20000014

08001828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x20>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_IncTick+0x24>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000018 	.word	0x20000018
 800184c:	200000fc 	.word	0x200000fc

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetTick+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200000fc 	.word	0x200000fc

08001868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff ffee 	bl	8001850 <HAL_GetTick>
 8001874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d005      	beq.n	800188e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_Delay+0x44>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800188e:	bf00      	nop
 8001890:	f7ff ffde 	bl	8001850 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	429a      	cmp	r2, r3
 800189e:	d8f7      	bhi.n	8001890 <HAL_Delay+0x28>
  {
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000018 	.word	0x20000018

080018b0 <__NVIC_SetPriorityGrouping>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	; (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	; (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff8e 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff29 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff3e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff8e 	bl	80019a4 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5d 	bl	8001950 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff31 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e16b      	b.n	8001dc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 815a 	bne.w	8001dc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80b4 	beq.w	8001dc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b60      	ldr	r3, [pc, #384]	; (8001de0 <HAL_GPIO_Init+0x30c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a5f      	ldr	r2, [pc, #380]	; (8001de0 <HAL_GPIO_Init+0x30c>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_GPIO_Init+0x30c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a5b      	ldr	r2, [pc, #364]	; (8001de4 <HAL_GPIO_Init+0x310>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	; (8001de8 <HAL_GPIO_Init+0x314>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d02b      	beq.n	8001cfa <HAL_GPIO_Init+0x226>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a51      	ldr	r2, [pc, #324]	; (8001dec <HAL_GPIO_Init+0x318>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d025      	beq.n	8001cf6 <HAL_GPIO_Init+0x222>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a50      	ldr	r2, [pc, #320]	; (8001df0 <HAL_GPIO_Init+0x31c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01f      	beq.n	8001cf2 <HAL_GPIO_Init+0x21e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4f      	ldr	r2, [pc, #316]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <HAL_GPIO_Init+0x21a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0x216>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4d      	ldr	r2, [pc, #308]	; (8001dfc <HAL_GPIO_Init+0x328>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_GPIO_Init+0x212>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4c      	ldr	r2, [pc, #304]	; (8001e00 <HAL_GPIO_Init+0x32c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_GPIO_Init+0x20e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4b      	ldr	r2, [pc, #300]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_GPIO_Init+0x20a>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e00e      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cde:	2308      	movs	r3, #8
 8001ce0:	e00c      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e00a      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e008      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	f002 0203 	and.w	r2, r2, #3
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	4093      	lsls	r3, r2
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d0c:	4935      	ldr	r1, [pc, #212]	; (8001de4 <HAL_GPIO_Init+0x310>)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3e:	4a32      	ldr	r2, [pc, #200]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d68:	4a27      	ldr	r2, [pc, #156]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	f67f ae90 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40013800 	.word	0x40013800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40021400 	.word	0x40021400
 8001e00:	40021800 	.word	0x40021800
 8001e04:	40021c00 	.word	0x40021c00
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e001      	b.n	8001e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f806 	bl	8001ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e267      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d075      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d00c      	beq.n	8001efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee2:	4b85      	ldr	r3, [pc, #532]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d112      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eee:	4b82      	ldr	r3, [pc, #520]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efa:	d10b      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d05b      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x108>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d157      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e242      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCC_OscConfig+0x74>
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a75      	ldr	r2, [pc, #468]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xb0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x98>
 8001f36:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6f      	ldr	r2, [pc, #444]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6c      	ldr	r2, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xb0>
 8001f50:	4b69      	ldr	r3, [pc, #420]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a68      	ldr	r2, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fc6e 	bl	8001850 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fc6a 	bl	8001850 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e207      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xc0>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fc5a 	bl	8001850 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fc56 	bl	8001850 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1f3      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xe8>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fce:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe6:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x152>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1c7      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4937      	ldr	r1, [pc, #220]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_RCC_OscConfig+0x244>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff fc0f 	bl	8001850 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002036:	f7ff fc0b 	bl	8001850 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1a8      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4925      	ldr	r1, [pc, #148]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_OscConfig+0x244>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff fbee 	bl	8001850 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff fbea 	bl	8001850 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e187      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d036      	beq.n	8002110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_RCC_OscConfig+0x248>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff fbce 	bl	8001850 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff fbca 	bl	8001850 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e167      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x200>
 80020d6:	e01b      	b.n	8002110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_OscConfig+0x248>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7ff fbb7 	bl	8001850 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	e00e      	b.n	8002104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e6:	f7ff fbb3 	bl	8001850 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d907      	bls.n	8002104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e150      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470000 	.word	0x42470000
 8002100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ea      	bne.n	80020e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8097 	beq.w	800224c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002122:	4b81      	ldr	r3, [pc, #516]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b7d      	ldr	r3, [pc, #500]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a7c      	ldr	r2, [pc, #496]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b7a      	ldr	r3, [pc, #488]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4b77      	ldr	r3, [pc, #476]	; (800232c <HAL_RCC_OscConfig+0x474>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d118      	bne.n	800218c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215a:	4b74      	ldr	r3, [pc, #464]	; (800232c <HAL_RCC_OscConfig+0x474>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a73      	ldr	r2, [pc, #460]	; (800232c <HAL_RCC_OscConfig+0x474>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7ff fb73 	bl	8001850 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7ff fb6f 	bl	8001850 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e10c      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x474>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2ea>
 8002194:	4b64      	ldr	r3, [pc, #400]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a63      	ldr	r2, [pc, #396]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	e01c      	b.n	80021dc <HAL_RCC_OscConfig+0x324>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x30c>
 80021aa:	4b5f      	ldr	r3, [pc, #380]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a5e      	ldr	r2, [pc, #376]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
 80021b6:	4b5c      	ldr	r3, [pc, #368]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a5b      	ldr	r2, [pc, #364]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0x324>
 80021c4:	4b58      	ldr	r3, [pc, #352]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	4a57      	ldr	r2, [pc, #348]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70
 80021d0:	4b55      	ldr	r3, [pc, #340]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a54      	ldr	r2, [pc, #336]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7ff fb34 	bl	8001850 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7ff fb30 	bl	8001850 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0cb      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	4b49      	ldr	r3, [pc, #292]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ee      	beq.n	80021ec <HAL_RCC_OscConfig+0x334>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7ff fb1e 	bl	8001850 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7ff fb1a 	bl	8001850 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0b5      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222e:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ee      	bne.n	8002218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002240:	4b39      	ldr	r3, [pc, #228]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4a38      	ldr	r2, [pc, #224]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a1 	beq.w	8002398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b08      	cmp	r3, #8
 8002260:	d05c      	beq.n	800231c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d141      	bne.n	80022ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_RCC_OscConfig+0x478>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff faee 	bl	8001850 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff faea 	bl	8001850 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e087      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	4b27      	ldr	r3, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	3b01      	subs	r3, #1
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	491b      	ldr	r1, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x478>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff fac3 	bl	8001850 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff fabf 	bl	8001850 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e05c      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x416>
 80022ec:	e054      	b.n	8002398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_RCC_OscConfig+0x478>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff faac 	bl	8001850 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff faa8 	bl	8001850 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e045      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x444>
 800231a:	e03d      	b.n	8002398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e038      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000
 8002330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4ec>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d028      	beq.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d121      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d11a      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002364:	4013      	ands	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800236a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800236c:	4293      	cmp	r3, r2
 800236e:	d111      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	3b01      	subs	r3, #1
 800237e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d107      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0cc      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b68      	ldr	r3, [pc, #416]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d90c      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b63      	ldr	r3, [pc, #396]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b8      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002414:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a52      	ldr	r2, [pc, #328]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800241e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	494d      	ldr	r1, [pc, #308]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d044      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d119      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e067      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b37      	ldr	r3, [pc, #220]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4934      	ldr	r1, [pc, #208]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7ff f9da 	bl	8001850 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7ff f9d6 	bl	8001850 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e04f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d20c      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e032      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4916      	ldr	r1, [pc, #88]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490e      	ldr	r1, [pc, #56]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f821 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490a      	ldr	r1, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f93a 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023c00 	.word	0x40023c00
 8002564:	40023800 	.word	0x40023800
 8002568:	08003104 	.word	0x08003104
 800256c:	20000010 	.word	0x20000010
 8002570:	20000014 	.word	0x20000014

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002578:	b090      	sub	sp, #64	; 0x40
 800257a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
 8002580:	2300      	movs	r3, #0
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002584:	2300      	movs	r3, #0
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d00d      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002598:	2b08      	cmp	r3, #8
 800259a:	f200 80a1 	bhi.w	80026e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x34>
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0x3a>
 80025a6:	e09b      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80025aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025ac:	e09b      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ae:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_GetSysClockFreq+0x188>)
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025b2:	e098      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b4:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025be:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d028      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	2200      	movs	r2, #0
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	627a      	str	r2, [r7, #36]	; 0x24
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025dc:	2100      	movs	r1, #0
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_GetSysClockFreq+0x188>)
 80025e0:	fb03 f201 	mul.w	r2, r3, r1
 80025e4:	2300      	movs	r3, #0
 80025e6:	fb00 f303 	mul.w	r3, r0, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	4a43      	ldr	r2, [pc, #268]	; (80026fc <HAL_RCC_GetSysClockFreq+0x188>)
 80025ee:	fba0 1202 	umull	r1, r2, r0, r2
 80025f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025f4:	460a      	mov	r2, r1
 80025f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80025f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025fa:	4413      	add	r3, r2
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002600:	2200      	movs	r2, #0
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	61fa      	str	r2, [r7, #28]
 8002606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800260a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800260e:	f7fd fe37 	bl	8000280 <__aeabi_uldivmod>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4613      	mov	r3, r2
 8002618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800261a:	e053      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	2200      	movs	r2, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	617a      	str	r2, [r7, #20]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800262e:	f04f 0b00 	mov.w	fp, #0
 8002632:	4652      	mov	r2, sl
 8002634:	465b      	mov	r3, fp
 8002636:	f04f 0000 	mov.w	r0, #0
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	0159      	lsls	r1, r3, #5
 8002640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002644:	0150      	lsls	r0, r2, #5
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	ebb2 080a 	subs.w	r8, r2, sl
 800264e:	eb63 090b 	sbc.w	r9, r3, fp
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800265e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002662:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002666:	ebb2 0408 	subs.w	r4, r2, r8
 800266a:	eb63 0509 	sbc.w	r5, r3, r9
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	00eb      	lsls	r3, r5, #3
 8002678:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800267c:	00e2      	lsls	r2, r4, #3
 800267e:	4614      	mov	r4, r2
 8002680:	461d      	mov	r5, r3
 8002682:	eb14 030a 	adds.w	r3, r4, sl
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	eb45 030b 	adc.w	r3, r5, fp
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800269a:	4629      	mov	r1, r5
 800269c:	028b      	lsls	r3, r1, #10
 800269e:	4621      	mov	r1, r4
 80026a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a4:	4621      	mov	r1, r4
 80026a6:	028a      	lsls	r2, r1, #10
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ae:	2200      	movs	r2, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	60fa      	str	r2, [r7, #12]
 80026b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026b8:	f7fd fde2 	bl	8000280 <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4613      	mov	r3, r2
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	3301      	adds	r3, #1
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80026d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026de:	e002      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80026e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3740      	adds	r7, #64	; 0x40
 80026ec:	46bd      	mov	sp, r7
 80026ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	00f42400 	.word	0x00f42400
 80026fc:	017d7840 	.word	0x017d7840

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_RCC_GetHCLKFreq+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000010 	.word	0x20000010

08002718 <__errno>:
 8002718:	4b01      	ldr	r3, [pc, #4]	; (8002720 <__errno+0x8>)
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2000001c 	.word	0x2000001c

08002724 <__libc_init_array>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4d0d      	ldr	r5, [pc, #52]	; (800275c <__libc_init_array+0x38>)
 8002728:	4c0d      	ldr	r4, [pc, #52]	; (8002760 <__libc_init_array+0x3c>)
 800272a:	1b64      	subs	r4, r4, r5
 800272c:	10a4      	asrs	r4, r4, #2
 800272e:	2600      	movs	r6, #0
 8002730:	42a6      	cmp	r6, r4
 8002732:	d109      	bne.n	8002748 <__libc_init_array+0x24>
 8002734:	4d0b      	ldr	r5, [pc, #44]	; (8002764 <__libc_init_array+0x40>)
 8002736:	4c0c      	ldr	r4, [pc, #48]	; (8002768 <__libc_init_array+0x44>)
 8002738:	f000 fcae 	bl	8003098 <_init>
 800273c:	1b64      	subs	r4, r4, r5
 800273e:	10a4      	asrs	r4, r4, #2
 8002740:	2600      	movs	r6, #0
 8002742:	42a6      	cmp	r6, r4
 8002744:	d105      	bne.n	8002752 <__libc_init_array+0x2e>
 8002746:	bd70      	pop	{r4, r5, r6, pc}
 8002748:	f855 3b04 	ldr.w	r3, [r5], #4
 800274c:	4798      	blx	r3
 800274e:	3601      	adds	r6, #1
 8002750:	e7ee      	b.n	8002730 <__libc_init_array+0xc>
 8002752:	f855 3b04 	ldr.w	r3, [r5], #4
 8002756:	4798      	blx	r3
 8002758:	3601      	adds	r6, #1
 800275a:	e7f2      	b.n	8002742 <__libc_init_array+0x1e>
 800275c:	08003150 	.word	0x08003150
 8002760:	08003150 	.word	0x08003150
 8002764:	08003150 	.word	0x08003150
 8002768:	08003154 	.word	0x08003154

0800276c <memset>:
 800276c:	4402      	add	r2, r0
 800276e:	4603      	mov	r3, r0
 8002770:	4293      	cmp	r3, r2
 8002772:	d100      	bne.n	8002776 <memset+0xa>
 8002774:	4770      	bx	lr
 8002776:	f803 1b01 	strb.w	r1, [r3], #1
 800277a:	e7f9      	b.n	8002770 <memset+0x4>

0800277c <siprintf>:
 800277c:	b40e      	push	{r1, r2, r3}
 800277e:	b500      	push	{lr}
 8002780:	b09c      	sub	sp, #112	; 0x70
 8002782:	ab1d      	add	r3, sp, #116	; 0x74
 8002784:	9002      	str	r0, [sp, #8]
 8002786:	9006      	str	r0, [sp, #24]
 8002788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800278c:	4809      	ldr	r0, [pc, #36]	; (80027b4 <siprintf+0x38>)
 800278e:	9107      	str	r1, [sp, #28]
 8002790:	9104      	str	r1, [sp, #16]
 8002792:	4909      	ldr	r1, [pc, #36]	; (80027b8 <siprintf+0x3c>)
 8002794:	f853 2b04 	ldr.w	r2, [r3], #4
 8002798:	9105      	str	r1, [sp, #20]
 800279a:	6800      	ldr	r0, [r0, #0]
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	a902      	add	r1, sp, #8
 80027a0:	f000 f888 	bl	80028b4 <_svfiprintf_r>
 80027a4:	9b02      	ldr	r3, [sp, #8]
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	b01c      	add	sp, #112	; 0x70
 80027ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80027b0:	b003      	add	sp, #12
 80027b2:	4770      	bx	lr
 80027b4:	2000001c 	.word	0x2000001c
 80027b8:	ffff0208 	.word	0xffff0208

080027bc <_vsiprintf_r>:
 80027bc:	b500      	push	{lr}
 80027be:	b09b      	sub	sp, #108	; 0x6c
 80027c0:	9100      	str	r1, [sp, #0]
 80027c2:	9104      	str	r1, [sp, #16]
 80027c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027c8:	9105      	str	r1, [sp, #20]
 80027ca:	9102      	str	r1, [sp, #8]
 80027cc:	4905      	ldr	r1, [pc, #20]	; (80027e4 <_vsiprintf_r+0x28>)
 80027ce:	9103      	str	r1, [sp, #12]
 80027d0:	4669      	mov	r1, sp
 80027d2:	f000 f86f 	bl	80028b4 <_svfiprintf_r>
 80027d6:	9b00      	ldr	r3, [sp, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	b01b      	add	sp, #108	; 0x6c
 80027de:	f85d fb04 	ldr.w	pc, [sp], #4
 80027e2:	bf00      	nop
 80027e4:	ffff0208 	.word	0xffff0208

080027e8 <vsiprintf>:
 80027e8:	4613      	mov	r3, r2
 80027ea:	460a      	mov	r2, r1
 80027ec:	4601      	mov	r1, r0
 80027ee:	4802      	ldr	r0, [pc, #8]	; (80027f8 <vsiprintf+0x10>)
 80027f0:	6800      	ldr	r0, [r0, #0]
 80027f2:	f7ff bfe3 	b.w	80027bc <_vsiprintf_r>
 80027f6:	bf00      	nop
 80027f8:	2000001c 	.word	0x2000001c

080027fc <__ssputs_r>:
 80027fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002800:	688e      	ldr	r6, [r1, #8]
 8002802:	429e      	cmp	r6, r3
 8002804:	4682      	mov	sl, r0
 8002806:	460c      	mov	r4, r1
 8002808:	4690      	mov	r8, r2
 800280a:	461f      	mov	r7, r3
 800280c:	d838      	bhi.n	8002880 <__ssputs_r+0x84>
 800280e:	898a      	ldrh	r2, [r1, #12]
 8002810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002814:	d032      	beq.n	800287c <__ssputs_r+0x80>
 8002816:	6825      	ldr	r5, [r4, #0]
 8002818:	6909      	ldr	r1, [r1, #16]
 800281a:	eba5 0901 	sub.w	r9, r5, r1
 800281e:	6965      	ldr	r5, [r4, #20]
 8002820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002828:	3301      	adds	r3, #1
 800282a:	444b      	add	r3, r9
 800282c:	106d      	asrs	r5, r5, #1
 800282e:	429d      	cmp	r5, r3
 8002830:	bf38      	it	cc
 8002832:	461d      	movcc	r5, r3
 8002834:	0553      	lsls	r3, r2, #21
 8002836:	d531      	bpl.n	800289c <__ssputs_r+0xa0>
 8002838:	4629      	mov	r1, r5
 800283a:	f000 fb63 	bl	8002f04 <_malloc_r>
 800283e:	4606      	mov	r6, r0
 8002840:	b950      	cbnz	r0, 8002858 <__ssputs_r+0x5c>
 8002842:	230c      	movs	r3, #12
 8002844:	f8ca 3000 	str.w	r3, [sl]
 8002848:	89a3      	ldrh	r3, [r4, #12]
 800284a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284e:	81a3      	strh	r3, [r4, #12]
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002858:	6921      	ldr	r1, [r4, #16]
 800285a:	464a      	mov	r2, r9
 800285c:	f000 fabe 	bl	8002ddc <memcpy>
 8002860:	89a3      	ldrh	r3, [r4, #12]
 8002862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286a:	81a3      	strh	r3, [r4, #12]
 800286c:	6126      	str	r6, [r4, #16]
 800286e:	6165      	str	r5, [r4, #20]
 8002870:	444e      	add	r6, r9
 8002872:	eba5 0509 	sub.w	r5, r5, r9
 8002876:	6026      	str	r6, [r4, #0]
 8002878:	60a5      	str	r5, [r4, #8]
 800287a:	463e      	mov	r6, r7
 800287c:	42be      	cmp	r6, r7
 800287e:	d900      	bls.n	8002882 <__ssputs_r+0x86>
 8002880:	463e      	mov	r6, r7
 8002882:	6820      	ldr	r0, [r4, #0]
 8002884:	4632      	mov	r2, r6
 8002886:	4641      	mov	r1, r8
 8002888:	f000 fab6 	bl	8002df8 <memmove>
 800288c:	68a3      	ldr	r3, [r4, #8]
 800288e:	1b9b      	subs	r3, r3, r6
 8002890:	60a3      	str	r3, [r4, #8]
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	4433      	add	r3, r6
 8002896:	6023      	str	r3, [r4, #0]
 8002898:	2000      	movs	r0, #0
 800289a:	e7db      	b.n	8002854 <__ssputs_r+0x58>
 800289c:	462a      	mov	r2, r5
 800289e:	f000 fba5 	bl	8002fec <_realloc_r>
 80028a2:	4606      	mov	r6, r0
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1e1      	bne.n	800286c <__ssputs_r+0x70>
 80028a8:	6921      	ldr	r1, [r4, #16]
 80028aa:	4650      	mov	r0, sl
 80028ac:	f000 fabe 	bl	8002e2c <_free_r>
 80028b0:	e7c7      	b.n	8002842 <__ssputs_r+0x46>
	...

080028b4 <_svfiprintf_r>:
 80028b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b8:	4698      	mov	r8, r3
 80028ba:	898b      	ldrh	r3, [r1, #12]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	b09d      	sub	sp, #116	; 0x74
 80028c0:	4607      	mov	r7, r0
 80028c2:	460d      	mov	r5, r1
 80028c4:	4614      	mov	r4, r2
 80028c6:	d50e      	bpl.n	80028e6 <_svfiprintf_r+0x32>
 80028c8:	690b      	ldr	r3, [r1, #16]
 80028ca:	b963      	cbnz	r3, 80028e6 <_svfiprintf_r+0x32>
 80028cc:	2140      	movs	r1, #64	; 0x40
 80028ce:	f000 fb19 	bl	8002f04 <_malloc_r>
 80028d2:	6028      	str	r0, [r5, #0]
 80028d4:	6128      	str	r0, [r5, #16]
 80028d6:	b920      	cbnz	r0, 80028e2 <_svfiprintf_r+0x2e>
 80028d8:	230c      	movs	r3, #12
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	e0d1      	b.n	8002a86 <_svfiprintf_r+0x1d2>
 80028e2:	2340      	movs	r3, #64	; 0x40
 80028e4:	616b      	str	r3, [r5, #20]
 80028e6:	2300      	movs	r3, #0
 80028e8:	9309      	str	r3, [sp, #36]	; 0x24
 80028ea:	2320      	movs	r3, #32
 80028ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80028f4:	2330      	movs	r3, #48	; 0x30
 80028f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002aa0 <_svfiprintf_r+0x1ec>
 80028fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028fe:	f04f 0901 	mov.w	r9, #1
 8002902:	4623      	mov	r3, r4
 8002904:	469a      	mov	sl, r3
 8002906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800290a:	b10a      	cbz	r2, 8002910 <_svfiprintf_r+0x5c>
 800290c:	2a25      	cmp	r2, #37	; 0x25
 800290e:	d1f9      	bne.n	8002904 <_svfiprintf_r+0x50>
 8002910:	ebba 0b04 	subs.w	fp, sl, r4
 8002914:	d00b      	beq.n	800292e <_svfiprintf_r+0x7a>
 8002916:	465b      	mov	r3, fp
 8002918:	4622      	mov	r2, r4
 800291a:	4629      	mov	r1, r5
 800291c:	4638      	mov	r0, r7
 800291e:	f7ff ff6d 	bl	80027fc <__ssputs_r>
 8002922:	3001      	adds	r0, #1
 8002924:	f000 80aa 	beq.w	8002a7c <_svfiprintf_r+0x1c8>
 8002928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800292a:	445a      	add	r2, fp
 800292c:	9209      	str	r2, [sp, #36]	; 0x24
 800292e:	f89a 3000 	ldrb.w	r3, [sl]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80a2 	beq.w	8002a7c <_svfiprintf_r+0x1c8>
 8002938:	2300      	movs	r3, #0
 800293a:	f04f 32ff 	mov.w	r2, #4294967295
 800293e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002942:	f10a 0a01 	add.w	sl, sl, #1
 8002946:	9304      	str	r3, [sp, #16]
 8002948:	9307      	str	r3, [sp, #28]
 800294a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800294e:	931a      	str	r3, [sp, #104]	; 0x68
 8002950:	4654      	mov	r4, sl
 8002952:	2205      	movs	r2, #5
 8002954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002958:	4851      	ldr	r0, [pc, #324]	; (8002aa0 <_svfiprintf_r+0x1ec>)
 800295a:	f7fd fc41 	bl	80001e0 <memchr>
 800295e:	9a04      	ldr	r2, [sp, #16]
 8002960:	b9d8      	cbnz	r0, 800299a <_svfiprintf_r+0xe6>
 8002962:	06d0      	lsls	r0, r2, #27
 8002964:	bf44      	itt	mi
 8002966:	2320      	movmi	r3, #32
 8002968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800296c:	0711      	lsls	r1, r2, #28
 800296e:	bf44      	itt	mi
 8002970:	232b      	movmi	r3, #43	; 0x2b
 8002972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002976:	f89a 3000 	ldrb.w	r3, [sl]
 800297a:	2b2a      	cmp	r3, #42	; 0x2a
 800297c:	d015      	beq.n	80029aa <_svfiprintf_r+0xf6>
 800297e:	9a07      	ldr	r2, [sp, #28]
 8002980:	4654      	mov	r4, sl
 8002982:	2000      	movs	r0, #0
 8002984:	f04f 0c0a 	mov.w	ip, #10
 8002988:	4621      	mov	r1, r4
 800298a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800298e:	3b30      	subs	r3, #48	; 0x30
 8002990:	2b09      	cmp	r3, #9
 8002992:	d94e      	bls.n	8002a32 <_svfiprintf_r+0x17e>
 8002994:	b1b0      	cbz	r0, 80029c4 <_svfiprintf_r+0x110>
 8002996:	9207      	str	r2, [sp, #28]
 8002998:	e014      	b.n	80029c4 <_svfiprintf_r+0x110>
 800299a:	eba0 0308 	sub.w	r3, r0, r8
 800299e:	fa09 f303 	lsl.w	r3, r9, r3
 80029a2:	4313      	orrs	r3, r2
 80029a4:	9304      	str	r3, [sp, #16]
 80029a6:	46a2      	mov	sl, r4
 80029a8:	e7d2      	b.n	8002950 <_svfiprintf_r+0x9c>
 80029aa:	9b03      	ldr	r3, [sp, #12]
 80029ac:	1d19      	adds	r1, r3, #4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	9103      	str	r1, [sp, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bfbb      	ittet	lt
 80029b6:	425b      	neglt	r3, r3
 80029b8:	f042 0202 	orrlt.w	r2, r2, #2
 80029bc:	9307      	strge	r3, [sp, #28]
 80029be:	9307      	strlt	r3, [sp, #28]
 80029c0:	bfb8      	it	lt
 80029c2:	9204      	strlt	r2, [sp, #16]
 80029c4:	7823      	ldrb	r3, [r4, #0]
 80029c6:	2b2e      	cmp	r3, #46	; 0x2e
 80029c8:	d10c      	bne.n	80029e4 <_svfiprintf_r+0x130>
 80029ca:	7863      	ldrb	r3, [r4, #1]
 80029cc:	2b2a      	cmp	r3, #42	; 0x2a
 80029ce:	d135      	bne.n	8002a3c <_svfiprintf_r+0x188>
 80029d0:	9b03      	ldr	r3, [sp, #12]
 80029d2:	1d1a      	adds	r2, r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	9203      	str	r2, [sp, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bfb8      	it	lt
 80029dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80029e0:	3402      	adds	r4, #2
 80029e2:	9305      	str	r3, [sp, #20]
 80029e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ab0 <_svfiprintf_r+0x1fc>
 80029e8:	7821      	ldrb	r1, [r4, #0]
 80029ea:	2203      	movs	r2, #3
 80029ec:	4650      	mov	r0, sl
 80029ee:	f7fd fbf7 	bl	80001e0 <memchr>
 80029f2:	b140      	cbz	r0, 8002a06 <_svfiprintf_r+0x152>
 80029f4:	2340      	movs	r3, #64	; 0x40
 80029f6:	eba0 000a 	sub.w	r0, r0, sl
 80029fa:	fa03 f000 	lsl.w	r0, r3, r0
 80029fe:	9b04      	ldr	r3, [sp, #16]
 8002a00:	4303      	orrs	r3, r0
 8002a02:	3401      	adds	r4, #1
 8002a04:	9304      	str	r3, [sp, #16]
 8002a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a0a:	4826      	ldr	r0, [pc, #152]	; (8002aa4 <_svfiprintf_r+0x1f0>)
 8002a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a10:	2206      	movs	r2, #6
 8002a12:	f7fd fbe5 	bl	80001e0 <memchr>
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d038      	beq.n	8002a8c <_svfiprintf_r+0x1d8>
 8002a1a:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <_svfiprintf_r+0x1f4>)
 8002a1c:	bb1b      	cbnz	r3, 8002a66 <_svfiprintf_r+0x1b2>
 8002a1e:	9b03      	ldr	r3, [sp, #12]
 8002a20:	3307      	adds	r3, #7
 8002a22:	f023 0307 	bic.w	r3, r3, #7
 8002a26:	3308      	adds	r3, #8
 8002a28:	9303      	str	r3, [sp, #12]
 8002a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a2c:	4433      	add	r3, r6
 8002a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a30:	e767      	b.n	8002902 <_svfiprintf_r+0x4e>
 8002a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a36:	460c      	mov	r4, r1
 8002a38:	2001      	movs	r0, #1
 8002a3a:	e7a5      	b.n	8002988 <_svfiprintf_r+0xd4>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	3401      	adds	r4, #1
 8002a40:	9305      	str	r3, [sp, #20]
 8002a42:	4619      	mov	r1, r3
 8002a44:	f04f 0c0a 	mov.w	ip, #10
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a4e:	3a30      	subs	r2, #48	; 0x30
 8002a50:	2a09      	cmp	r2, #9
 8002a52:	d903      	bls.n	8002a5c <_svfiprintf_r+0x1a8>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0c5      	beq.n	80029e4 <_svfiprintf_r+0x130>
 8002a58:	9105      	str	r1, [sp, #20]
 8002a5a:	e7c3      	b.n	80029e4 <_svfiprintf_r+0x130>
 8002a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a60:	4604      	mov	r4, r0
 8002a62:	2301      	movs	r3, #1
 8002a64:	e7f0      	b.n	8002a48 <_svfiprintf_r+0x194>
 8002a66:	ab03      	add	r3, sp, #12
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	462a      	mov	r2, r5
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <_svfiprintf_r+0x1f8>)
 8002a6e:	a904      	add	r1, sp, #16
 8002a70:	4638      	mov	r0, r7
 8002a72:	f3af 8000 	nop.w
 8002a76:	1c42      	adds	r2, r0, #1
 8002a78:	4606      	mov	r6, r0
 8002a7a:	d1d6      	bne.n	8002a2a <_svfiprintf_r+0x176>
 8002a7c:	89ab      	ldrh	r3, [r5, #12]
 8002a7e:	065b      	lsls	r3, r3, #25
 8002a80:	f53f af2c 	bmi.w	80028dc <_svfiprintf_r+0x28>
 8002a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a86:	b01d      	add	sp, #116	; 0x74
 8002a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a8c:	ab03      	add	r3, sp, #12
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	462a      	mov	r2, r5
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <_svfiprintf_r+0x1f8>)
 8002a94:	a904      	add	r1, sp, #16
 8002a96:	4638      	mov	r0, r7
 8002a98:	f000 f87a 	bl	8002b90 <_printf_i>
 8002a9c:	e7eb      	b.n	8002a76 <_svfiprintf_r+0x1c2>
 8002a9e:	bf00      	nop
 8002aa0:	08003114 	.word	0x08003114
 8002aa4:	0800311e 	.word	0x0800311e
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	080027fd 	.word	0x080027fd
 8002ab0:	0800311a 	.word	0x0800311a

08002ab4 <_printf_common>:
 8002ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ab8:	4616      	mov	r6, r2
 8002aba:	4699      	mov	r9, r3
 8002abc:	688a      	ldr	r2, [r1, #8]
 8002abe:	690b      	ldr	r3, [r1, #16]
 8002ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bfb8      	it	lt
 8002ac8:	4613      	movlt	r3, r2
 8002aca:	6033      	str	r3, [r6, #0]
 8002acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ad0:	4607      	mov	r7, r0
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	b10a      	cbz	r2, 8002ada <_printf_common+0x26>
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	6033      	str	r3, [r6, #0]
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	0699      	lsls	r1, r3, #26
 8002ade:	bf42      	ittt	mi
 8002ae0:	6833      	ldrmi	r3, [r6, #0]
 8002ae2:	3302      	addmi	r3, #2
 8002ae4:	6033      	strmi	r3, [r6, #0]
 8002ae6:	6825      	ldr	r5, [r4, #0]
 8002ae8:	f015 0506 	ands.w	r5, r5, #6
 8002aec:	d106      	bne.n	8002afc <_printf_common+0x48>
 8002aee:	f104 0a19 	add.w	sl, r4, #25
 8002af2:	68e3      	ldr	r3, [r4, #12]
 8002af4:	6832      	ldr	r2, [r6, #0]
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	42ab      	cmp	r3, r5
 8002afa:	dc26      	bgt.n	8002b4a <_printf_common+0x96>
 8002afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b00:	1e13      	subs	r3, r2, #0
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	bf18      	it	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	0692      	lsls	r2, r2, #26
 8002b0a:	d42b      	bmi.n	8002b64 <_printf_common+0xb0>
 8002b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b10:	4649      	mov	r1, r9
 8002b12:	4638      	mov	r0, r7
 8002b14:	47c0      	blx	r8
 8002b16:	3001      	adds	r0, #1
 8002b18:	d01e      	beq.n	8002b58 <_printf_common+0xa4>
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	68e5      	ldr	r5, [r4, #12]
 8002b1e:	6832      	ldr	r2, [r6, #0]
 8002b20:	f003 0306 	and.w	r3, r3, #6
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	bf08      	it	eq
 8002b28:	1aad      	subeq	r5, r5, r2
 8002b2a:	68a3      	ldr	r3, [r4, #8]
 8002b2c:	6922      	ldr	r2, [r4, #16]
 8002b2e:	bf0c      	ite	eq
 8002b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b34:	2500      	movne	r5, #0
 8002b36:	4293      	cmp	r3, r2
 8002b38:	bfc4      	itt	gt
 8002b3a:	1a9b      	subgt	r3, r3, r2
 8002b3c:	18ed      	addgt	r5, r5, r3
 8002b3e:	2600      	movs	r6, #0
 8002b40:	341a      	adds	r4, #26
 8002b42:	42b5      	cmp	r5, r6
 8002b44:	d11a      	bne.n	8002b7c <_printf_common+0xc8>
 8002b46:	2000      	movs	r0, #0
 8002b48:	e008      	b.n	8002b5c <_printf_common+0xa8>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	4652      	mov	r2, sl
 8002b4e:	4649      	mov	r1, r9
 8002b50:	4638      	mov	r0, r7
 8002b52:	47c0      	blx	r8
 8002b54:	3001      	adds	r0, #1
 8002b56:	d103      	bne.n	8002b60 <_printf_common+0xac>
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b60:	3501      	adds	r5, #1
 8002b62:	e7c6      	b.n	8002af2 <_printf_common+0x3e>
 8002b64:	18e1      	adds	r1, r4, r3
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	2030      	movs	r0, #48	; 0x30
 8002b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b6e:	4422      	add	r2, r4
 8002b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b78:	3302      	adds	r3, #2
 8002b7a:	e7c7      	b.n	8002b0c <_printf_common+0x58>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	4622      	mov	r2, r4
 8002b80:	4649      	mov	r1, r9
 8002b82:	4638      	mov	r0, r7
 8002b84:	47c0      	blx	r8
 8002b86:	3001      	adds	r0, #1
 8002b88:	d0e6      	beq.n	8002b58 <_printf_common+0xa4>
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	e7d9      	b.n	8002b42 <_printf_common+0x8e>
	...

08002b90 <_printf_i>:
 8002b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b94:	7e0f      	ldrb	r7, [r1, #24]
 8002b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b98:	2f78      	cmp	r7, #120	; 0x78
 8002b9a:	4691      	mov	r9, r2
 8002b9c:	4680      	mov	r8, r0
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	469a      	mov	sl, r3
 8002ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ba6:	d807      	bhi.n	8002bb8 <_printf_i+0x28>
 8002ba8:	2f62      	cmp	r7, #98	; 0x62
 8002baa:	d80a      	bhi.n	8002bc2 <_printf_i+0x32>
 8002bac:	2f00      	cmp	r7, #0
 8002bae:	f000 80d8 	beq.w	8002d62 <_printf_i+0x1d2>
 8002bb2:	2f58      	cmp	r7, #88	; 0x58
 8002bb4:	f000 80a3 	beq.w	8002cfe <_printf_i+0x16e>
 8002bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bc0:	e03a      	b.n	8002c38 <_printf_i+0xa8>
 8002bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bc6:	2b15      	cmp	r3, #21
 8002bc8:	d8f6      	bhi.n	8002bb8 <_printf_i+0x28>
 8002bca:	a101      	add	r1, pc, #4	; (adr r1, 8002bd0 <_printf_i+0x40>)
 8002bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bd0:	08002c29 	.word	0x08002c29
 8002bd4:	08002c3d 	.word	0x08002c3d
 8002bd8:	08002bb9 	.word	0x08002bb9
 8002bdc:	08002bb9 	.word	0x08002bb9
 8002be0:	08002bb9 	.word	0x08002bb9
 8002be4:	08002bb9 	.word	0x08002bb9
 8002be8:	08002c3d 	.word	0x08002c3d
 8002bec:	08002bb9 	.word	0x08002bb9
 8002bf0:	08002bb9 	.word	0x08002bb9
 8002bf4:	08002bb9 	.word	0x08002bb9
 8002bf8:	08002bb9 	.word	0x08002bb9
 8002bfc:	08002d49 	.word	0x08002d49
 8002c00:	08002c6d 	.word	0x08002c6d
 8002c04:	08002d2b 	.word	0x08002d2b
 8002c08:	08002bb9 	.word	0x08002bb9
 8002c0c:	08002bb9 	.word	0x08002bb9
 8002c10:	08002d6b 	.word	0x08002d6b
 8002c14:	08002bb9 	.word	0x08002bb9
 8002c18:	08002c6d 	.word	0x08002c6d
 8002c1c:	08002bb9 	.word	0x08002bb9
 8002c20:	08002bb9 	.word	0x08002bb9
 8002c24:	08002d33 	.word	0x08002d33
 8002c28:	682b      	ldr	r3, [r5, #0]
 8002c2a:	1d1a      	adds	r2, r3, #4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	602a      	str	r2, [r5, #0]
 8002c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0a3      	b.n	8002d84 <_printf_i+0x1f4>
 8002c3c:	6820      	ldr	r0, [r4, #0]
 8002c3e:	6829      	ldr	r1, [r5, #0]
 8002c40:	0606      	lsls	r6, r0, #24
 8002c42:	f101 0304 	add.w	r3, r1, #4
 8002c46:	d50a      	bpl.n	8002c5e <_printf_i+0xce>
 8002c48:	680e      	ldr	r6, [r1, #0]
 8002c4a:	602b      	str	r3, [r5, #0]
 8002c4c:	2e00      	cmp	r6, #0
 8002c4e:	da03      	bge.n	8002c58 <_printf_i+0xc8>
 8002c50:	232d      	movs	r3, #45	; 0x2d
 8002c52:	4276      	negs	r6, r6
 8002c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c58:	485e      	ldr	r0, [pc, #376]	; (8002dd4 <_printf_i+0x244>)
 8002c5a:	230a      	movs	r3, #10
 8002c5c:	e019      	b.n	8002c92 <_printf_i+0x102>
 8002c5e:	680e      	ldr	r6, [r1, #0]
 8002c60:	602b      	str	r3, [r5, #0]
 8002c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c66:	bf18      	it	ne
 8002c68:	b236      	sxthne	r6, r6
 8002c6a:	e7ef      	b.n	8002c4c <_printf_i+0xbc>
 8002c6c:	682b      	ldr	r3, [r5, #0]
 8002c6e:	6820      	ldr	r0, [r4, #0]
 8002c70:	1d19      	adds	r1, r3, #4
 8002c72:	6029      	str	r1, [r5, #0]
 8002c74:	0601      	lsls	r1, r0, #24
 8002c76:	d501      	bpl.n	8002c7c <_printf_i+0xec>
 8002c78:	681e      	ldr	r6, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <_printf_i+0xf2>
 8002c7c:	0646      	lsls	r6, r0, #25
 8002c7e:	d5fb      	bpl.n	8002c78 <_printf_i+0xe8>
 8002c80:	881e      	ldrh	r6, [r3, #0]
 8002c82:	4854      	ldr	r0, [pc, #336]	; (8002dd4 <_printf_i+0x244>)
 8002c84:	2f6f      	cmp	r7, #111	; 0x6f
 8002c86:	bf0c      	ite	eq
 8002c88:	2308      	moveq	r3, #8
 8002c8a:	230a      	movne	r3, #10
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c92:	6865      	ldr	r5, [r4, #4]
 8002c94:	60a5      	str	r5, [r4, #8]
 8002c96:	2d00      	cmp	r5, #0
 8002c98:	bfa2      	ittt	ge
 8002c9a:	6821      	ldrge	r1, [r4, #0]
 8002c9c:	f021 0104 	bicge.w	r1, r1, #4
 8002ca0:	6021      	strge	r1, [r4, #0]
 8002ca2:	b90e      	cbnz	r6, 8002ca8 <_printf_i+0x118>
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	d04d      	beq.n	8002d44 <_printf_i+0x1b4>
 8002ca8:	4615      	mov	r5, r2
 8002caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cae:	fb03 6711 	mls	r7, r3, r1, r6
 8002cb2:	5dc7      	ldrb	r7, [r0, r7]
 8002cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002cb8:	4637      	mov	r7, r6
 8002cba:	42bb      	cmp	r3, r7
 8002cbc:	460e      	mov	r6, r1
 8002cbe:	d9f4      	bls.n	8002caa <_printf_i+0x11a>
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d10b      	bne.n	8002cdc <_printf_i+0x14c>
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	07de      	lsls	r6, r3, #31
 8002cc8:	d508      	bpl.n	8002cdc <_printf_i+0x14c>
 8002cca:	6923      	ldr	r3, [r4, #16]
 8002ccc:	6861      	ldr	r1, [r4, #4]
 8002cce:	4299      	cmp	r1, r3
 8002cd0:	bfde      	ittt	le
 8002cd2:	2330      	movle	r3, #48	; 0x30
 8002cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002cdc:	1b52      	subs	r2, r2, r5
 8002cde:	6122      	str	r2, [r4, #16]
 8002ce0:	f8cd a000 	str.w	sl, [sp]
 8002ce4:	464b      	mov	r3, r9
 8002ce6:	aa03      	add	r2, sp, #12
 8002ce8:	4621      	mov	r1, r4
 8002cea:	4640      	mov	r0, r8
 8002cec:	f7ff fee2 	bl	8002ab4 <_printf_common>
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d14c      	bne.n	8002d8e <_printf_i+0x1fe>
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	b004      	add	sp, #16
 8002cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cfe:	4835      	ldr	r0, [pc, #212]	; (8002dd4 <_printf_i+0x244>)
 8002d00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d04:	6829      	ldr	r1, [r5, #0]
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d0c:	6029      	str	r1, [r5, #0]
 8002d0e:	061d      	lsls	r5, r3, #24
 8002d10:	d514      	bpl.n	8002d3c <_printf_i+0x1ac>
 8002d12:	07df      	lsls	r7, r3, #31
 8002d14:	bf44      	itt	mi
 8002d16:	f043 0320 	orrmi.w	r3, r3, #32
 8002d1a:	6023      	strmi	r3, [r4, #0]
 8002d1c:	b91e      	cbnz	r6, 8002d26 <_printf_i+0x196>
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	f023 0320 	bic.w	r3, r3, #32
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	2310      	movs	r3, #16
 8002d28:	e7b0      	b.n	8002c8c <_printf_i+0xfc>
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	f043 0320 	orr.w	r3, r3, #32
 8002d30:	6023      	str	r3, [r4, #0]
 8002d32:	2378      	movs	r3, #120	; 0x78
 8002d34:	4828      	ldr	r0, [pc, #160]	; (8002dd8 <_printf_i+0x248>)
 8002d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d3a:	e7e3      	b.n	8002d04 <_printf_i+0x174>
 8002d3c:	0659      	lsls	r1, r3, #25
 8002d3e:	bf48      	it	mi
 8002d40:	b2b6      	uxthmi	r6, r6
 8002d42:	e7e6      	b.n	8002d12 <_printf_i+0x182>
 8002d44:	4615      	mov	r5, r2
 8002d46:	e7bb      	b.n	8002cc0 <_printf_i+0x130>
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	6826      	ldr	r6, [r4, #0]
 8002d4c:	6961      	ldr	r1, [r4, #20]
 8002d4e:	1d18      	adds	r0, r3, #4
 8002d50:	6028      	str	r0, [r5, #0]
 8002d52:	0635      	lsls	r5, r6, #24
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	d501      	bpl.n	8002d5c <_printf_i+0x1cc>
 8002d58:	6019      	str	r1, [r3, #0]
 8002d5a:	e002      	b.n	8002d62 <_printf_i+0x1d2>
 8002d5c:	0670      	lsls	r0, r6, #25
 8002d5e:	d5fb      	bpl.n	8002d58 <_printf_i+0x1c8>
 8002d60:	8019      	strh	r1, [r3, #0]
 8002d62:	2300      	movs	r3, #0
 8002d64:	6123      	str	r3, [r4, #16]
 8002d66:	4615      	mov	r5, r2
 8002d68:	e7ba      	b.n	8002ce0 <_printf_i+0x150>
 8002d6a:	682b      	ldr	r3, [r5, #0]
 8002d6c:	1d1a      	adds	r2, r3, #4
 8002d6e:	602a      	str	r2, [r5, #0]
 8002d70:	681d      	ldr	r5, [r3, #0]
 8002d72:	6862      	ldr	r2, [r4, #4]
 8002d74:	2100      	movs	r1, #0
 8002d76:	4628      	mov	r0, r5
 8002d78:	f7fd fa32 	bl	80001e0 <memchr>
 8002d7c:	b108      	cbz	r0, 8002d82 <_printf_i+0x1f2>
 8002d7e:	1b40      	subs	r0, r0, r5
 8002d80:	6060      	str	r0, [r4, #4]
 8002d82:	6863      	ldr	r3, [r4, #4]
 8002d84:	6123      	str	r3, [r4, #16]
 8002d86:	2300      	movs	r3, #0
 8002d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d8c:	e7a8      	b.n	8002ce0 <_printf_i+0x150>
 8002d8e:	6923      	ldr	r3, [r4, #16]
 8002d90:	462a      	mov	r2, r5
 8002d92:	4649      	mov	r1, r9
 8002d94:	4640      	mov	r0, r8
 8002d96:	47d0      	blx	sl
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d0ab      	beq.n	8002cf4 <_printf_i+0x164>
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	079b      	lsls	r3, r3, #30
 8002da0:	d413      	bmi.n	8002dca <_printf_i+0x23a>
 8002da2:	68e0      	ldr	r0, [r4, #12]
 8002da4:	9b03      	ldr	r3, [sp, #12]
 8002da6:	4298      	cmp	r0, r3
 8002da8:	bfb8      	it	lt
 8002daa:	4618      	movlt	r0, r3
 8002dac:	e7a4      	b.n	8002cf8 <_printf_i+0x168>
 8002dae:	2301      	movs	r3, #1
 8002db0:	4632      	mov	r2, r6
 8002db2:	4649      	mov	r1, r9
 8002db4:	4640      	mov	r0, r8
 8002db6:	47d0      	blx	sl
 8002db8:	3001      	adds	r0, #1
 8002dba:	d09b      	beq.n	8002cf4 <_printf_i+0x164>
 8002dbc:	3501      	adds	r5, #1
 8002dbe:	68e3      	ldr	r3, [r4, #12]
 8002dc0:	9903      	ldr	r1, [sp, #12]
 8002dc2:	1a5b      	subs	r3, r3, r1
 8002dc4:	42ab      	cmp	r3, r5
 8002dc6:	dcf2      	bgt.n	8002dae <_printf_i+0x21e>
 8002dc8:	e7eb      	b.n	8002da2 <_printf_i+0x212>
 8002dca:	2500      	movs	r5, #0
 8002dcc:	f104 0619 	add.w	r6, r4, #25
 8002dd0:	e7f5      	b.n	8002dbe <_printf_i+0x22e>
 8002dd2:	bf00      	nop
 8002dd4:	08003125 	.word	0x08003125
 8002dd8:	08003136 	.word	0x08003136

08002ddc <memcpy>:
 8002ddc:	440a      	add	r2, r1
 8002dde:	4291      	cmp	r1, r2
 8002de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002de4:	d100      	bne.n	8002de8 <memcpy+0xc>
 8002de6:	4770      	bx	lr
 8002de8:	b510      	push	{r4, lr}
 8002dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002df2:	4291      	cmp	r1, r2
 8002df4:	d1f9      	bne.n	8002dea <memcpy+0xe>
 8002df6:	bd10      	pop	{r4, pc}

08002df8 <memmove>:
 8002df8:	4288      	cmp	r0, r1
 8002dfa:	b510      	push	{r4, lr}
 8002dfc:	eb01 0402 	add.w	r4, r1, r2
 8002e00:	d902      	bls.n	8002e08 <memmove+0x10>
 8002e02:	4284      	cmp	r4, r0
 8002e04:	4623      	mov	r3, r4
 8002e06:	d807      	bhi.n	8002e18 <memmove+0x20>
 8002e08:	1e43      	subs	r3, r0, #1
 8002e0a:	42a1      	cmp	r1, r4
 8002e0c:	d008      	beq.n	8002e20 <memmove+0x28>
 8002e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e16:	e7f8      	b.n	8002e0a <memmove+0x12>
 8002e18:	4402      	add	r2, r0
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	428a      	cmp	r2, r1
 8002e1e:	d100      	bne.n	8002e22 <memmove+0x2a>
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e2a:	e7f7      	b.n	8002e1c <memmove+0x24>

08002e2c <_free_r>:
 8002e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e2e:	2900      	cmp	r1, #0
 8002e30:	d044      	beq.n	8002ebc <_free_r+0x90>
 8002e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e36:	9001      	str	r0, [sp, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8002e3e:	bfb8      	it	lt
 8002e40:	18e4      	addlt	r4, r4, r3
 8002e42:	f000 f913 	bl	800306c <__malloc_lock>
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <_free_r+0x94>)
 8002e48:	9801      	ldr	r0, [sp, #4]
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	b933      	cbnz	r3, 8002e5c <_free_r+0x30>
 8002e4e:	6063      	str	r3, [r4, #4]
 8002e50:	6014      	str	r4, [r2, #0]
 8002e52:	b003      	add	sp, #12
 8002e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e58:	f000 b90e 	b.w	8003078 <__malloc_unlock>
 8002e5c:	42a3      	cmp	r3, r4
 8002e5e:	d908      	bls.n	8002e72 <_free_r+0x46>
 8002e60:	6825      	ldr	r5, [r4, #0]
 8002e62:	1961      	adds	r1, r4, r5
 8002e64:	428b      	cmp	r3, r1
 8002e66:	bf01      	itttt	eq
 8002e68:	6819      	ldreq	r1, [r3, #0]
 8002e6a:	685b      	ldreq	r3, [r3, #4]
 8002e6c:	1949      	addeq	r1, r1, r5
 8002e6e:	6021      	streq	r1, [r4, #0]
 8002e70:	e7ed      	b.n	8002e4e <_free_r+0x22>
 8002e72:	461a      	mov	r2, r3
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	b10b      	cbz	r3, 8002e7c <_free_r+0x50>
 8002e78:	42a3      	cmp	r3, r4
 8002e7a:	d9fa      	bls.n	8002e72 <_free_r+0x46>
 8002e7c:	6811      	ldr	r1, [r2, #0]
 8002e7e:	1855      	adds	r5, r2, r1
 8002e80:	42a5      	cmp	r5, r4
 8002e82:	d10b      	bne.n	8002e9c <_free_r+0x70>
 8002e84:	6824      	ldr	r4, [r4, #0]
 8002e86:	4421      	add	r1, r4
 8002e88:	1854      	adds	r4, r2, r1
 8002e8a:	42a3      	cmp	r3, r4
 8002e8c:	6011      	str	r1, [r2, #0]
 8002e8e:	d1e0      	bne.n	8002e52 <_free_r+0x26>
 8002e90:	681c      	ldr	r4, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	6053      	str	r3, [r2, #4]
 8002e96:	4421      	add	r1, r4
 8002e98:	6011      	str	r1, [r2, #0]
 8002e9a:	e7da      	b.n	8002e52 <_free_r+0x26>
 8002e9c:	d902      	bls.n	8002ea4 <_free_r+0x78>
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	6003      	str	r3, [r0, #0]
 8002ea2:	e7d6      	b.n	8002e52 <_free_r+0x26>
 8002ea4:	6825      	ldr	r5, [r4, #0]
 8002ea6:	1961      	adds	r1, r4, r5
 8002ea8:	428b      	cmp	r3, r1
 8002eaa:	bf04      	itt	eq
 8002eac:	6819      	ldreq	r1, [r3, #0]
 8002eae:	685b      	ldreq	r3, [r3, #4]
 8002eb0:	6063      	str	r3, [r4, #4]
 8002eb2:	bf04      	itt	eq
 8002eb4:	1949      	addeq	r1, r1, r5
 8002eb6:	6021      	streq	r1, [r4, #0]
 8002eb8:	6054      	str	r4, [r2, #4]
 8002eba:	e7ca      	b.n	8002e52 <_free_r+0x26>
 8002ebc:	b003      	add	sp, #12
 8002ebe:	bd30      	pop	{r4, r5, pc}
 8002ec0:	20000100 	.word	0x20000100

08002ec4 <sbrk_aligned>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4e0e      	ldr	r6, [pc, #56]	; (8002f00 <sbrk_aligned+0x3c>)
 8002ec8:	460c      	mov	r4, r1
 8002eca:	6831      	ldr	r1, [r6, #0]
 8002ecc:	4605      	mov	r5, r0
 8002ece:	b911      	cbnz	r1, 8002ed6 <sbrk_aligned+0x12>
 8002ed0:	f000 f8bc 	bl	800304c <_sbrk_r>
 8002ed4:	6030      	str	r0, [r6, #0]
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f000 f8b7 	bl	800304c <_sbrk_r>
 8002ede:	1c43      	adds	r3, r0, #1
 8002ee0:	d00a      	beq.n	8002ef8 <sbrk_aligned+0x34>
 8002ee2:	1cc4      	adds	r4, r0, #3
 8002ee4:	f024 0403 	bic.w	r4, r4, #3
 8002ee8:	42a0      	cmp	r0, r4
 8002eea:	d007      	beq.n	8002efc <sbrk_aligned+0x38>
 8002eec:	1a21      	subs	r1, r4, r0
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f000 f8ac 	bl	800304c <_sbrk_r>
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	d101      	bne.n	8002efc <sbrk_aligned+0x38>
 8002ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8002efc:	4620      	mov	r0, r4
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
 8002f00:	20000104 	.word	0x20000104

08002f04 <_malloc_r>:
 8002f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f08:	1ccd      	adds	r5, r1, #3
 8002f0a:	f025 0503 	bic.w	r5, r5, #3
 8002f0e:	3508      	adds	r5, #8
 8002f10:	2d0c      	cmp	r5, #12
 8002f12:	bf38      	it	cc
 8002f14:	250c      	movcc	r5, #12
 8002f16:	2d00      	cmp	r5, #0
 8002f18:	4607      	mov	r7, r0
 8002f1a:	db01      	blt.n	8002f20 <_malloc_r+0x1c>
 8002f1c:	42a9      	cmp	r1, r5
 8002f1e:	d905      	bls.n	8002f2c <_malloc_r+0x28>
 8002f20:	230c      	movs	r3, #12
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	2600      	movs	r6, #0
 8002f26:	4630      	mov	r0, r6
 8002f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f2c:	4e2e      	ldr	r6, [pc, #184]	; (8002fe8 <_malloc_r+0xe4>)
 8002f2e:	f000 f89d 	bl	800306c <__malloc_lock>
 8002f32:	6833      	ldr	r3, [r6, #0]
 8002f34:	461c      	mov	r4, r3
 8002f36:	bb34      	cbnz	r4, 8002f86 <_malloc_r+0x82>
 8002f38:	4629      	mov	r1, r5
 8002f3a:	4638      	mov	r0, r7
 8002f3c:	f7ff ffc2 	bl	8002ec4 <sbrk_aligned>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	4604      	mov	r4, r0
 8002f44:	d14d      	bne.n	8002fe2 <_malloc_r+0xde>
 8002f46:	6834      	ldr	r4, [r6, #0]
 8002f48:	4626      	mov	r6, r4
 8002f4a:	2e00      	cmp	r6, #0
 8002f4c:	d140      	bne.n	8002fd0 <_malloc_r+0xcc>
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	4631      	mov	r1, r6
 8002f52:	4638      	mov	r0, r7
 8002f54:	eb04 0803 	add.w	r8, r4, r3
 8002f58:	f000 f878 	bl	800304c <_sbrk_r>
 8002f5c:	4580      	cmp	r8, r0
 8002f5e:	d13a      	bne.n	8002fd6 <_malloc_r+0xd2>
 8002f60:	6821      	ldr	r1, [r4, #0]
 8002f62:	3503      	adds	r5, #3
 8002f64:	1a6d      	subs	r5, r5, r1
 8002f66:	f025 0503 	bic.w	r5, r5, #3
 8002f6a:	3508      	adds	r5, #8
 8002f6c:	2d0c      	cmp	r5, #12
 8002f6e:	bf38      	it	cc
 8002f70:	250c      	movcc	r5, #12
 8002f72:	4629      	mov	r1, r5
 8002f74:	4638      	mov	r0, r7
 8002f76:	f7ff ffa5 	bl	8002ec4 <sbrk_aligned>
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d02b      	beq.n	8002fd6 <_malloc_r+0xd2>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	442b      	add	r3, r5
 8002f82:	6023      	str	r3, [r4, #0]
 8002f84:	e00e      	b.n	8002fa4 <_malloc_r+0xa0>
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	1b52      	subs	r2, r2, r5
 8002f8a:	d41e      	bmi.n	8002fca <_malloc_r+0xc6>
 8002f8c:	2a0b      	cmp	r2, #11
 8002f8e:	d916      	bls.n	8002fbe <_malloc_r+0xba>
 8002f90:	1961      	adds	r1, r4, r5
 8002f92:	42a3      	cmp	r3, r4
 8002f94:	6025      	str	r5, [r4, #0]
 8002f96:	bf18      	it	ne
 8002f98:	6059      	strne	r1, [r3, #4]
 8002f9a:	6863      	ldr	r3, [r4, #4]
 8002f9c:	bf08      	it	eq
 8002f9e:	6031      	streq	r1, [r6, #0]
 8002fa0:	5162      	str	r2, [r4, r5]
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	f104 060b 	add.w	r6, r4, #11
 8002faa:	f000 f865 	bl	8003078 <__malloc_unlock>
 8002fae:	f026 0607 	bic.w	r6, r6, #7
 8002fb2:	1d23      	adds	r3, r4, #4
 8002fb4:	1af2      	subs	r2, r6, r3
 8002fb6:	d0b6      	beq.n	8002f26 <_malloc_r+0x22>
 8002fb8:	1b9b      	subs	r3, r3, r6
 8002fba:	50a3      	str	r3, [r4, r2]
 8002fbc:	e7b3      	b.n	8002f26 <_malloc_r+0x22>
 8002fbe:	6862      	ldr	r2, [r4, #4]
 8002fc0:	42a3      	cmp	r3, r4
 8002fc2:	bf0c      	ite	eq
 8002fc4:	6032      	streq	r2, [r6, #0]
 8002fc6:	605a      	strne	r2, [r3, #4]
 8002fc8:	e7ec      	b.n	8002fa4 <_malloc_r+0xa0>
 8002fca:	4623      	mov	r3, r4
 8002fcc:	6864      	ldr	r4, [r4, #4]
 8002fce:	e7b2      	b.n	8002f36 <_malloc_r+0x32>
 8002fd0:	4634      	mov	r4, r6
 8002fd2:	6876      	ldr	r6, [r6, #4]
 8002fd4:	e7b9      	b.n	8002f4a <_malloc_r+0x46>
 8002fd6:	230c      	movs	r3, #12
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	4638      	mov	r0, r7
 8002fdc:	f000 f84c 	bl	8003078 <__malloc_unlock>
 8002fe0:	e7a1      	b.n	8002f26 <_malloc_r+0x22>
 8002fe2:	6025      	str	r5, [r4, #0]
 8002fe4:	e7de      	b.n	8002fa4 <_malloc_r+0xa0>
 8002fe6:	bf00      	nop
 8002fe8:	20000100 	.word	0x20000100

08002fec <_realloc_r>:
 8002fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff0:	4680      	mov	r8, r0
 8002ff2:	4614      	mov	r4, r2
 8002ff4:	460e      	mov	r6, r1
 8002ff6:	b921      	cbnz	r1, 8003002 <_realloc_r+0x16>
 8002ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	f7ff bf81 	b.w	8002f04 <_malloc_r>
 8003002:	b92a      	cbnz	r2, 8003010 <_realloc_r+0x24>
 8003004:	f7ff ff12 	bl	8002e2c <_free_r>
 8003008:	4625      	mov	r5, r4
 800300a:	4628      	mov	r0, r5
 800300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003010:	f000 f838 	bl	8003084 <_malloc_usable_size_r>
 8003014:	4284      	cmp	r4, r0
 8003016:	4607      	mov	r7, r0
 8003018:	d802      	bhi.n	8003020 <_realloc_r+0x34>
 800301a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800301e:	d812      	bhi.n	8003046 <_realloc_r+0x5a>
 8003020:	4621      	mov	r1, r4
 8003022:	4640      	mov	r0, r8
 8003024:	f7ff ff6e 	bl	8002f04 <_malloc_r>
 8003028:	4605      	mov	r5, r0
 800302a:	2800      	cmp	r0, #0
 800302c:	d0ed      	beq.n	800300a <_realloc_r+0x1e>
 800302e:	42bc      	cmp	r4, r7
 8003030:	4622      	mov	r2, r4
 8003032:	4631      	mov	r1, r6
 8003034:	bf28      	it	cs
 8003036:	463a      	movcs	r2, r7
 8003038:	f7ff fed0 	bl	8002ddc <memcpy>
 800303c:	4631      	mov	r1, r6
 800303e:	4640      	mov	r0, r8
 8003040:	f7ff fef4 	bl	8002e2c <_free_r>
 8003044:	e7e1      	b.n	800300a <_realloc_r+0x1e>
 8003046:	4635      	mov	r5, r6
 8003048:	e7df      	b.n	800300a <_realloc_r+0x1e>
	...

0800304c <_sbrk_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	4d06      	ldr	r5, [pc, #24]	; (8003068 <_sbrk_r+0x1c>)
 8003050:	2300      	movs	r3, #0
 8003052:	4604      	mov	r4, r0
 8003054:	4608      	mov	r0, r1
 8003056:	602b      	str	r3, [r5, #0]
 8003058:	f7fe fb22 	bl	80016a0 <_sbrk>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_sbrk_r+0x1a>
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	b103      	cbz	r3, 8003066 <_sbrk_r+0x1a>
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	20000108 	.word	0x20000108

0800306c <__malloc_lock>:
 800306c:	4801      	ldr	r0, [pc, #4]	; (8003074 <__malloc_lock+0x8>)
 800306e:	f000 b811 	b.w	8003094 <__retarget_lock_acquire_recursive>
 8003072:	bf00      	nop
 8003074:	2000010c 	.word	0x2000010c

08003078 <__malloc_unlock>:
 8003078:	4801      	ldr	r0, [pc, #4]	; (8003080 <__malloc_unlock+0x8>)
 800307a:	f000 b80c 	b.w	8003096 <__retarget_lock_release_recursive>
 800307e:	bf00      	nop
 8003080:	2000010c 	.word	0x2000010c

08003084 <_malloc_usable_size_r>:
 8003084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003088:	1f18      	subs	r0, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	bfbc      	itt	lt
 800308e:	580b      	ldrlt	r3, [r1, r0]
 8003090:	18c0      	addlt	r0, r0, r3
 8003092:	4770      	bx	lr

08003094 <__retarget_lock_acquire_recursive>:
 8003094:	4770      	bx	lr

08003096 <__retarget_lock_release_recursive>:
 8003096:	4770      	bx	lr

08003098 <_init>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr

080030a4 <_fini>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr
